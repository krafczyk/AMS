
=========================================================================

     Introduction  to  a  Prototype  Event  Display  Based  on  ROOT

				Ping  Yeh
		  	     Academia Sinica
			       13 Nov 1997

=========================================================================
[minor updated on 1 Dec 1997 by Ping Yeh]


-------------------------------------------------------------------------
1. Using the program
--------------------

   The program sources and libraries can be found in boronams:~pyeh/display
directory.  It is based on Rene Brun's ATLFast program.  To use it, type
"root" at your unix prompt, and " .x display.C " at the root prompt.  Before
doing so, make sure environment variables ROOTSYS and LD_LIBRARY_PATH are 
defined properly and $ROOTSYS/bin is in your path.

   The program display.C does the following tasks:
	1.  loads in shared libraries libAMS.so and libAMSg.so, which
	    are compiled from the sources in the same directory.
	2.  opens the root file "prmu-old.root" and shows the first event
	    on the screen.

There are 3 defined views:  top view, side view, front view, and a combined
"all views".  In each view you have the freedom to change the viewing
angle by mouse, although it can be difficult sometimes.  Zooming in/out
is not implemented yet.

   You can go to next/previous event by pressing buttons in the window.

   You can get some basic info about a displayed object (cluster, hit,
track, particle,...etc) by pointing the mouse pointer at it with
[Options / Event Status] turned on.


-------------------------------------------------------------------------
2. Making the program
---------------------

   In the source directory, simply type "gmake depend" followed by "gmake".  
It makes the libraries libAMS.so and libAMSg.so (there are no executables 
to make).  "gmake depend" is necessary only at the first time.


-------------------------------------------------------------------------
3. Structure of the program
---------------------------

   All classes are derived directly or indirectly from ROOT base class
TObject.   The highest level class is  AMSRoot  which should have only
one instance.  A global pointer gAMSRoot is set to this instance when
AMSRoot constructor is called.

   There are several classes that represent parts of AMS data:
AMSToFCluster, AMSSiHit, AMSCTCCluster, AMSTrack, and AMSParticle.  
A list of such objects are created and maintained by "makers".  
In this program since everything is read from input file instead 
of being reconstructed, I call them "readers":  AMSToFClusterReader, 
AMSSiHitReader, ... etc.

   There are 4 classes related to displaying:  
	AMSVirtualDisplay -- the interface class for displaying
	AMSDisplay        -- the implementation of display
	AMSFruit	  -- Responsible for drawing 3D-box-like objects
	THelix		  -- Responsible for drawing helixes
THelix class is a general helix.  Since it is not implemented in ROOT
system yet, I wrote it by myself.  I've communicated with Rene Brun and
it is possible to put it into ROOT releases in the future.

   gAMSRoot holds a list of makers (or readers).  When an event is
read in, it loops over all makers to draw their products.


-------------------------------------------------------------------------
4. Future Plan for the program
------------------------------

   There are still a large room for improvement.  The following is on
my list:

	1. Get geometry.
	2. Show detailed information of an object when click right mouse
	   button on it.
	3. Put links between objects.  For example, a track should know
	   which clusters or hits it passes through.
	4. More user controls like disable/enable display of a certain
	   type of objects, make histograms, ... etc.
	5. Re-design the interface.  Especially the free rotation of
	   viewing angle needs some work to make it better.  3 "knobs"
	   for rotating in 3 different axes is a possible option.
	6. Make a nice logo?

