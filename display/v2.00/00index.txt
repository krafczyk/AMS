#  $Id: 00index.txt,v 1.5 2001/01/22 17:32:36 choutko Exp $

=========================================================================

     Introduction  to  a  Prototype  Event  Display  Based  on  ROOT

				Ping  Yeh
		  	     Academia Sinica
			       13 Nov 1997

=========================================================================
[major updated on 17 Aug 1998 by Shuwei YE]
[minor updated on 1 Dec 1997 by Ping Yeh]
[migrated into CVS repository on 16 Dec 1997 with help of Vitali Shoutko,
 and a major modification of this document is done to reflect this]


-------------------------------------------------------------------------
0. Introduction
---------------
   Main features: 3D, rotate with mouse, convenient mouse-control, with many
                  options, running on X-window, have a try!

   Data format: ntuple(standard one in AMS),
                ntuple-converted ROOT file via h2root

   Requirements: X-window, ROOT, CERNLIB.

   System: only test on DEC-Alpha/OSF1 and IBM/AIX

   Status: still on development.


-------------------------------------------------------------------------
1. Obtaining the program
------------------------

The program sources can be obtained by doing

	cvs checkout AMS  (cvs update)

This will create AMS/display directory and put all source files
of AMS event display into it.


-------------------------------------------------------------------------
2. Making the program
---------------------

This program is based on Rene Brun's ROOT and ATLFast program.  To build it,

   1) Define ROOTSYS (preparation)

    Define the global environment variable ROOTSYS to the location of ROOT
    via "export ROOTSYS = /Offline/root/OSF1" (bash/ksh)
    or  "setenv ROOTSYS /Offline/root/OSF1" (csh/tcsh)
    see AA_README in ROOT.

   2) Make it up

     cd to AMS/display directory, then type 

	gmake standalone

and all .cxx files are compiled and linked into a shared library called
libAMS.so.  Please note that this has only been tested on alpha workstations
running DEC/UNIX and IBM/AIX.


-------------------------------------------------------------------------
3. Running the program
----------------------

To run it, please make sure you have the environment to run ROOT.
Only 3 things needs to be set:

1. Environment variable ROOTSYS  should point to the ROOT directory.(Defined
   already in the building)
2. Add .:$ROOTSYS/lib intp Environment variables LD_LIBRARY_PATH (Alpha/OSF1)
   and LIBPATH (IBM/AIX)
3. $ROOTSYS/bin is in your path.

If you telnet to other machine to run, remember to set environment variable
DISPLAY to your own X-window.

Then you are ready to go.

   type "AIX/bin/amsed -h" (at IBM/AIX), "OSF1/bin/amsed -h" (at Alpha/OSF1)
to get a brief usage guide.

There are 4 defined views:  top view, side view, front view, two combined
"all views" and "two view".  In each view you have the freedom to change 
the viewing angle by mouse, although it can be difficult sometimes.  
Zooming in/out is not implemented yet.

   You can go to next/previous event by pressing buttons in the window.

   You can get some basic info about a displayed object (cluster, hit,
track, particle,...etc) by pointing the mouse pointer at it unless you
turn off [Options / Event Status].

   Click on "GotoRunEvent", can go to specific event in the opened file. And
other data file can be opened by clicking on "OpenDataFile".

   A useful function when clicking "IdleTimer" on(Red and sunken) enable you
to impose cuts to select only interesting events to display after every Idle
timer which is provided in the command line "amsed -t" or by default 5 seconds.
The cuts you impose are defined in IdleHandle.C. There is already a sample of
the file.

-------------------------------------------------------------------------
4. Structure of the program
---------------------------

   All classes are derived directly or indirectly from ROOT base class
TObject.   The highest level class is  AMSR_Root  which should have only
one instance.  A global pointer gAMSR_Root is set to this instance when
AMSR_Root constructor is called.

   There are several classes that represent parts of AMS data:
AMSR_ToFCluster, AMSR_SiHit, AMSR_CTCCluster, AMSR_Track, and AMSR_Particle.  
A list of such objects are created and maintained by "makers".  
In this program since everything is read from input file instead 
of being reconstructed, I call them "readers":  AMSR_ToFClusterReader, 
AMSR_SiHitReader, ... etc.

   There are 4 classes related to displaying:  
	AMSR_VirtualDisplay -- the interface class for displaying
	AMSR_Display        -- the implementation of display
	AMSR_Fruit	  -- Responsible for drawing 3D-box-like objects
	THelix		  -- Responsible for drawing helixes
THelix class is a general helix.  Since it is not implemented in ROOT
system yet, I wrote it by myself.  I've communicated with Rene Brun and
it is possible to put it into ROOT releases in the future.

   gAMSR_Root holds a list of makers (or readers).  When an event is
read in, it loops over all makers to draw their products.


-------------------------------------------------------------------------
4. Future Plan for the program
------------------------------

   There are still a large room for improvement.  The following is on
my list:

	1. Get geometry.
	2. Show detailed information of an object when click right mouse
	   button on it.
	3. Put links between objects.  For example, a track should know
	   which clusters or hits it passes through.
	4. More user controls like disable/enable display of a certain
	   type of objects, make histograms, ... etc.
	5. Re-design the interface.  Especially the free rotation of
	   viewing angle needs some work to make it better.  3 "knobs"
	   for rotating in 3 different axes is a possible option.
	6. Make a nice logo?

