const integer ncharge=10; // e,p,He... F
class AMSCharge: public AMSlink{   // Charge calculation
protected:
  AMSBeta * _pbeta;      // pointer to beta --> then to track & tof 
 integer _ChargeTOF;     // Charge from TOF
 integer _ChargeTracker;  // Charge from tracker
 number  _ProbTOF[ncharge];      //(prob) to be e, p, He,... F
 integer _IndxTOF[ncharge];      //(index) 0,...,9 from most to least prob charge
 number  _ProbTracker[ncharge];  // (prob) to be e, p, He,... F
 integer _IndxTracker[ncharge];  //(index) 0,...,9 from most to least prob charge

 static number _lkhdTracker[ncharge][100];

 static number _lkhdTOF[ncharge][100];

 static number _lkhdStepTracker[ncharge];

 static number _lkhdStepTOF[ncharge];

 static integer _chargeTracker[ncharge];

 static integer _chargeTOF[ncharge];
   
 static char _fnam[128];  // calibration file name
public:
  AMSCharge(AMSBeta * pbeta)  // init ctor
// Get 

  integer getchargeTOF()const{return _ChargeTOF;}

  integer getchargeTracker()const{return _ChargeTracker;}

  AMSBeta * getpbeta()const{return _pbeta;}

  static void addnext(AMSBeta* pbeta, integer nhitTOF,
 integer nhitTracker, number EdepTOF[4], number EdepTracker[6]); //add next el
   void Fit(integer nhitTOF, integer nhitTracker, number
   EdepTOF[4], number EdepTracker[6]);  // Likelihood fit to Charge

  static void init();   // Initialization
  static void build();  // build elements
  static void print();  // print elements

