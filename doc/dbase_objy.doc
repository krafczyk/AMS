                                                     Alexei Klimentov
                                                    (alexei.klimentov@cern.ch)
Filename : dbase_objy.doc                            Last Edit : Oct 31, 1996.

General Information.

 AMS database uses Object Oriented Database (DB) Software (s/w) known as 
Objectivity. Each AMS C++ class has a database analog, it is described using 
DDL (Data Definition Language) and has the extension ddl. DDL file (also 
called schema file) has a corresponding method file with the same name and the
extension C. The DDL processor creates header files and schema implementation 
file for each DDL schema file. 

 For example :
  ~/AMS/include/event.h - defines the AMS event class
  ~/AMS/db/eventD.ddl   - DDL schema file defines the AMS event class for a 
                          database
  ~/AMS/db/eventD.C     - method source file of eventD.ddl
  ~/AMS/db/eventD.h     - header file
  ~/AMS/db/eventD_ref.h - reference header file
  ~/AMS/db/eventD_ddl.C - C++ implementation file

Files eventD.h, eventD_ref.h and eventD_ddl.C are generated by DDL processor
and they are machine independent.

 The database attributes are defined in the boot file :
 ~/AMS/db/boot/LOM, don't forget to do
 setenv OO_FD_BOOT ../db/boot/LOM ( or other path if you'll change the place of
 boot file)

 The objectivity related definitions are in objy_def, config.user_'ARCH' and 
config.'ARCH' files, all are in ~/AMS/install/ and ~/AMS/db/. The definitions
from objy_def needs to be executed once per login session (use command 
source objy_def, to execute it) , config* files are included in make file. You
have to change the FDID number in config file (use the last 4 digits of your 
CERN office phone number, if you need more than one FDID, ask me and I'll 
allocate it for you).

 The object files are placed in ~/AMS/db/bin/'ARCH', the exe files are in 
~/AMS/exe/'ARCH'. 

 There are two make files :
  MakeDB *) - to create database and AMS+DB version of the 'standard' AMS 
              program. MakeDB uses AMS object files, created by Mgbatch 
              (Mcxxfix)
  InitDB *) - to create database initialization program lmsInit. lmsInit 
              should be executed once, before execution of any other program.

*) goto ~/AMS/db directory first.

  AMS events are associated with list. The name of list is set by program using
JobName and SetupName datacards. The event ID, formed from the event number & 
run number, it is unique within the list. Geometry, tracking media, materials 
and constants are also associated with the list.

Event data are splitted between several containers. 
For example: 
            the information about tracks, clusters, hits, betas, etc is stored
            in containers TrTracks, TrClusters, TrRecHits, Beta, etc.

 READ and WRITE data cards have the following meaning :
 READ = 1 (WRITE = 1)
    read (write) setup (geometry, materials, tracking media) from the database
 READ = 10 (WRITE = 10)
    read (write)  mceventg from the database for the list defined by JobName
 READ = 100 (WRITE = 100)
    read (write) all MC banks from the database for the list defined by JobName
 READ = 1000 (WRITE = 1000)
    read (write) all banks from the database for the list defined by JobName

How to start ?

 - do you have an account on afl3u0 ? 
    (send mail to me to get it)
 - do you have an access to the CVS repositary of AMS s/w ?
    (ask V.Choutko to give you an access, vitaly.choutko@cern.ch)
 - create your own copy of AMS s/w
 - build necessary object files, use the standard Mcxxfix procedure for Alpha 
   or Mgbatch for the AIX (see known bugs report)

 from this point it is Objectivity specific

 - get login definitions from the file AMS/doc/objy_def, edit and execute them
 - run MakeDB and InitDB to build your own copy of the database
 - the program is ready.

 usefull Objectivity commands

// to run the browser

   $setenv DISPLAY display_name:0
   $ootoolmgr 'PATH'/LOM& 

   where LOM is the name of your bootfile and PATH is a path to it

// cleanup if program abnormally ended

   $oocleanup -local 'PATH'/LOM 

HOW TO BUILD CERNSP VERSION OF PROGRAM TO ACCESS dbase PLACED ON AMS ALPHA 
                   (afl3u0.cern.ch) LOCAL DISK

- build database on local disk
- copy ../db/boot/LOM file from the local disk to the place you can access from
  cernsp.
- execute on cernsp setenv OO_FD_BOOT 'PATH'/LOM
- copy schema files, method files, the result of ooddlx processing to the area
  you can access from the cernsp
- execute gmake -f MakeClientDB on cersnp, it starts compiling of *.C files.
  as the result of MakeClientDB you'll get an executive one can run from 
  cernsp. 
- be sure that remote access to the database is allowed (oostartams should be
  run and alive on afl3u0, usually I take care of this)
- start exec on cernsp.


AMS DBASE UTILITIES (../exe/$(ARCH) )

 printList [flag] [listname]  - prints full (flag = F/f) or short (flag = S/s) 
                                information about the list with name listname 
                                or about all lists 
 deleteRun             - delete all events of the particular run (works only on
                         aix, because of bug in Objectivity)
 deleteList            - delete list and all associated containers
 deleteSetup           - delete setup

MORE INFORMATION CAN BE FOUND IN  
=======
- build database on local disk
- copy ../db/boot/LOM file from the local disk to the place you can access from
  cernsp.
- execute on cernsp setenv OO_FD_BOOT 'PATH'/LOM
- copy schema files, method files, the result of ooddlx processing to the area
  you can access from the cernsp
- execute gmake -f MakeClientDB on cersnp, it starts compiling of *.C files.
  as the result of MakeClientDB you'll get an executive one can run from 
  cernsp. 
- be sure that remote access to the database is allowed (oostartams should be
  run and alive on afl3u0, usually I take care of this)
- start exec on cernsp.


MORE INFORMATION CAN BE FOUND IN  
   http://wwwcn1.cern.ch/asd/cernlib/rd45/index.html


Main Subroutines :

AddList(listName,setupName, 0,listH) - add list to the database

       char* listName                - list name
       char* setupName               - setup name
       ooHandle(AMSEventList) listH  - pointer to the list, returned by the 
                                       subroutine

AddEvent(listName,event,runID,WriteStartEnd) - write event to database

       char* listName - name of list event associated with
       event          - event number
       runID          - unique event ID, build by program based on run # and 
                        event #
       WriteStartEnd  - flag, 1 - start write transaction 
                             -1 - commit write tranaction
                             -2 - start and commit after writing 1 event

GetNEvents(listName, eventID, eventN, nevents, mode, flag) - 
      read N events, starting from event with eventID, or from eventN, if 
      eventID = " "
        
        char*   listName - name of list event associated with
        char*   eventID  - unique event ID
        integer eventN   - event position in the list
        integer nevents  - number of events to read
        ooMode  mode     - database open mode (Update or Read)
        integer flag

AddMaterial(listName)  - write materials to database
FillMaterial(listName) - read materials from database

AddTMedia(listName)   - write tracking media to database
FillTMedia(listName)  - read tracking media from database

AddGeometry(listName)  - write geometry to database
FillGeometry(listName) - read geometry from database
