

class AMSTimeID: public AMSNode {               
...
};



Invented to manipualte time or "run" dependent variables : calibration const,
pedestals etc etc etc.

For each set of such variables (e.g. array or class instance) 
the following instance of timeid class should be set up in 
AMSJob::_timeinitjob()

TID.add( new AMSTimeID(AMSID id, tm begin, tm end, int nbytes, void* pdata));

where 

id is unique identifier, where
 char * part is arbitary string with length < 256 
 integer part is equal to AMSJob::getjobtype()  
tm begin - start validity time
tm end   - end   validity time
nbytes   - sizeof data in bytes
pdata     - pointer to first element of the data 
            data should consist of 32 bit words ( so no double please) 
            to be portable between bend/lend machines
tm structure is defined in sys <time.h>

relevant elements:

structure tm{

...

int tm_sec;    // seconds 0-59
int tm_min;    // minutes 0-59
int tm_hour   //  hours   0-23
int tm_mday   //  day in month 1-31
int tm_mon    //  month   0-11
int tm_year   //  year from 1900 (96 for 1996)
...
}


------------

The following methods exist to exchange dbase<->timeid

access :

AMSTimeID *ptid=  AMSJob::gethead()->gettimestructure();       
AMSTimeID * offspring=(AMSTimeID*)ptid->down();  // get first timeid instance
while(offspring){
.........

    offspring=(AMSTimeID*)offspring->next();   // get one by one
}


public methods:

integer UpdateMe()      // update(!=0) or not update dbase
integer GetNbytes()     // get number of bytes
integer CopyOut(void *pdataNew) // copy timeid-> pdatanew
integer CopyIn(void *pdataNew)  // copy pdatanew->timeid
void gettime(time_t & insert, time_t & begin, time_t & end) // get times
void SetTime (time_t insert, time_t begin, time_t end) // set times
methods from AMSNode & AMSID class (getname, getid etc)