// How to manipulate with containers

A) User class format ;

//Suppose XXX is a user class name ;
// XXX =  AMS{SubDetName}{MC/Raw/}{Name}

class XXX : public AMSlink {
private:
...
...
...
protected:
 void _printEl(){....}   // to print class instance
 void _writeEl(){....}   // to add class instance into ntuple
 void _copyEl(){}        // to copy to db, dummy now
 AMSID crgid(){...]      // To make geant volume id corr given element
 integer operator < (AMSlink & o)const {// "<" relationship between instances
  // No RTTI - take a "risk"here        // Needed only for "sorted" containers
  XXX * p =(XXX*)(&o);                  // a-la Pavel
  ... ;
 } 
...
public:
XXX(...):AMSlink(0),...{...}  // constructor
~XXX(){...}                   // destructor (if any)
...
XXX *  next(){return (XXX*)_next;}
static void build();   // build the container 
};
//examples for functions etc in e.g. trrec.h, trrec.C


B) Initialization of containers

//in corresponding _si{re}(detectorname)initevent() routine in event.C

AMSEvent::gethead()->add (new AMSContainer(AMSID("AMSContainer:XXX",k),0));

// There can be several containers for one class which differs in "k"
// e.g. for AMSTrRechit class there are 6 containers, each containing 
// 3dim point with particular(=k+1) layer


C) Adding element in container "k"


    AMSEvent::gethead()->addnext(AMSID("XXX",k),new XXX(...));


D) Getting elements from container "k"

// NonSorted one

XXX *ptr=(XXX*)AMSEvent::gethead()->
 getheadC("XXX",k); // ptr points to 1st element now
XXX * ptrN;
ptrN=ptr->next(); // ptrN points to next element now (=0 if no more)

// sorted a-la Pavel one


XXX *ptr=(XXX*)AMSEvent::gethead()->
 getheadC("XXX",k,1); // last 1 to sort; ptr points to 1st element now
integer last;
XXX * ptrN;
ptrN=ptr->next(); // ptrN points to next element now 
if(ptrN)last=ptrN->testlast(); // last==1 if *ptrN->next() != *ptrN; else ==0
// NB
// once sorted container cannot be "unsorted"
// its the user responsibility to provide proper operator < for class XXX
// default operator < does not sort at all (always returns 1)

