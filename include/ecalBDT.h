#include <vector>
#include <cmath>
#include <string>
#include <iostream>
#include "TDataType.h"

#ifndef NN
#define NN new BDT_DecisionTreeNode
#endif
   
#ifndef BDT_DecisionTreeNode__def
#define BDT_DecisionTreeNode__def
   
class BDT_DecisionTreeNode {
   
public:
   
   // constructor of an essentially "empty" node floating in space
   BDT_DecisionTreeNode ( BDT_DecisionTreeNode* left,
                          BDT_DecisionTreeNode* right,
                          double cutValue, bool cutType, int selector,
                          int nodeType, double purity, double response ) :
   fLeft    ( left     ),
   fRight   ( right    ),
   fCutValue( cutValue ),
   fCutType ( cutType  ),
   fSelector( selector ),
   fNodeType( nodeType ),
   fPurity  ( purity   ),
   fResponse( response ){}

   virtual ~BDT_DecisionTreeNode();

   // test event if it decends the tree at this node to the right
   virtual bool GoesRight( const std::vector<double>& inputValues ) const;
   BDT_DecisionTreeNode* GetRight( void )  {return fRight; };

   // test event if it decends the tree at this node to the left 
   virtual bool GoesLeft ( const std::vector<double>& inputValues ) const;
   BDT_DecisionTreeNode* GetLeft( void ) { return fLeft; };   

   // return  S/(S+B) (purity) at this node (from  training)

   double GetPurity( void ) const { return fPurity; } 
   // return the node type
   int    GetNodeType( void ) const { return fNodeType; }
   double GetResponse(void) const {return fResponse;}

private:

   BDT_DecisionTreeNode*   fLeft;     // pointer to the left daughter node
   BDT_DecisionTreeNode*   fRight;    // pointer to the right daughter node
   double                  fCutValue; // cut value appplied on this node to discriminate bkg against sig
   bool                    fCutType;  // true: if event variable > cutValue ==> signal , false otherwise
   int                     fSelector; // index of variable used in node selection (decision tree)   
   int                     fNodeType; // Type of node: -1 == Bkg-leaf, 1 == Signal-leaf, 0 = internal 
   double                  fPurity;   // Purity of node from training
   double                  fResponse; // Regression response value of node
}; 
   
//_______________________________________________________________________
BDT_DecisionTreeNode::~BDT_DecisionTreeNode()
{
   if (fLeft  != NULL) delete fLeft;
   if (fRight != NULL) delete fRight;
}; 
   
//_______________________________________________________________________
bool BDT_DecisionTreeNode::GoesRight( const std::vector<double>& inputValues ) const
{
   // test event if it decends the tree at this node to the right
   bool result = (inputValues[fSelector] > fCutValue );
   if (fCutType == true) return result; //the cuts are selecting Signal ;
   else return !result;
}
   
//_______________________________________________________________________
bool BDT_DecisionTreeNode::GoesLeft( const std::vector<double>& inputValues ) const
{
   // test event if it decends the tree at this node to the left
   if (!this->GoesRight(inputValues)) return true;
   else return false;
}
   
#endif
   
#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadBDT : public IClassifierReader {

 public:

   // constructor
   ReadBDT() 
      : IClassifierReader(),
        fClassName( "ReadBDT" ),
        fNvars( 12 ),
        fIsNormalised( false )
   {      
      // the training input variables
      const char* inputVars[] = { "L2LFracNorm", "F2LEnedepNorm", "F2LFracNorm", "LayerCOGNorm", "LayerSigmaNorm", "LayerSkewnessNorm", "LayerKurtosisNorm", "ShowerRadiusEnergy3cmNorm", "ShowerRadiusEnergy5cmNorm", "S1S3xNorm", "S1S3yNorm", "DifoSumNorm" };

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -8.25087833404541;
      fVmax[0] = 29.490779876709;
      fVmin[1] = -2.12040972709656;
      fVmax[1] = 27.8727703094482;
      fVmin[2] = -2.50295114517212;
      fVmax[2] = 77.4569396972656;
      fVmin[3] = -5580571.5;
      fVmax[3] = 92.7463760375977;
      fVmin[4] = -38567145472;
      fVmax[4] = 17.283390045166;
      fVmin[5] = -77.6060180664062;
      fVmax[5] = 36431.53515625;
      fVmin[6] = -44.8094444274902;
      fVmax[6] = 550759808;
      fVmin[7] = -89.8370513916016;
      fVmax[7] = 13.7513837814331;
      fVmin[8] = -162.270767211914;
      fVmax[8] = 17.8487148284912;
      fVmin[9] = -9999;
      fVmax[9] = 4.90593671798706;
      fVmin[10] = -9999;
      fVmax[10] = 4.08844804763794;
      fVmin[11] = -14103583744;
      fVmax[11] = 23.7884883880615;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';
      fType[3] = 'F';
      fType[4] = 'F';
      fType[5] = 'F';
      fType[6] = 'F';
      fType[7] = 'F';
      fType[8] = 'F';
      fType[9] = 'F';
      fType[10] = 'F';
      fType[11] = 'F';

      // initialize constants
      Initialize();

   }

   // destructor
   virtual ~ReadBDT() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the 
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const;

 private:

   // method-specific destructor
   void Clear();

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   const bool fIsNormalised;
   bool IsNormalised() const { return fIsNormalised; }
   double fVmin[12];
   double fVmax[12];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[12];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)
   std::vector<BDT_DecisionTreeNode*> fForest;       // i.e. root nodes of decision trees
   std::vector<double>                fBoostWeights; // the weights applied in the individual boosts
};

double ReadBDT::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   double myMVA = 0;
   double norm  = 0;
   for (unsigned int itree=0; itree<fForest.size(); itree++){
      BDT_DecisionTreeNode *current = fForest[itree];
      while (current->GetNodeType() == 0) { //intermediate node
         if (current->GoesRight(inputValues)) current=(BDT_DecisionTreeNode*)current->GetRight();
         else current=(BDT_DecisionTreeNode*)current->GetLeft();
      }
      myMVA += fBoostWeights[itree] *  current->GetNodeType();
      norm  += fBoostWeights[itree];
   }
   return myMVA /= norm;
};

void ReadBDT::Initialize()
{
  // itree = 0
  fBoostWeights.push_back(2.19179257815994);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.81113,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.252696,-99) , 
1.92423, 1, 8, 0, 0.783083,-99) , 
NN(
0, 
0, 
0.850189, 1, -1, -1, 0.343088,-99) , 
-2.1547, 0, 7, 0, 0.734444,-99) , 
NN(
0, 
0, 
-2.49539, 0, -1, -1, 0.0877592,-99) , 
-1.2855, 0, 1, 0, 0.596093,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.528139,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0930233,-99) , 
3.08565, 1, 2, 0, 0.459854,-99) , 
NN(
0, 
0, 
-1.1761, 0, -1, -1, 0.0421245,-99) , 
1.33037, 1, 0, 0, 0.181707,-99) , 
NN(
0, 
0, 
0.279881, 1, -1, -1, 0.0195605,-99) , 
-2.27716, 0, 7, 0, 0.0261109,-99) , 
-2.82073, 0, 8, 0, 0.297757,-99)    );
  // itree = 1
  fBoostWeights.push_back(0.983261);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.875496,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.110576,-99) , 
4.78918, 1, 2, 0, 0.860352,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.511657,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.194601,-99) , 
2.04112, 1, 2, 0, 0.45676,-99) , 
-2.40529, 1, 7, 0, 0.517272,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.565052,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.22682,-99) , 
0.153382, 0, 7, 0, 0.381684,-99) , 
NN(
0, 
0, 
-3.72527, 0, -1, -1, 0.0660991,-99) , 
-2.42107, 0, 4, 0, 0.296063,-99) , 
1.60065, 1, 0, 0, 0.429066,-99) , 
NN(
0, 
0, 
-0.598646, 0, -1, -1, 0.154621,-99) , 
-2.82073, 0, 8, 0, 0.333047,-99)    );
  // itree = 2
  fBoostWeights.push_back(0.981283);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-11.2571, 0, -1, 1, 0.71252,-99) , 
NN(
0, 
0, 
-2.2778, 1, -1, -1, 0.363182,-99) , 
-2.49547, 1, 7, 0, 0.471996,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.588039,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.295873,-99) , 
-1.32002, 1, 1, 0, 0.325017,-99) , 
NN(
0, 
0, 
-3.88016, 0, -1, -1, 0.0354519,-99) , 
-3.46225, 0, 4, 0, 0.295396,-99) , 
0.411142, 1, 0, 0, 0.358442,-99) , 
NN(
0, 
0, 
-0.989133, 1, -1, -1, 0.0291708,-99) , 
4.05114, 1, 2, 0, 0.336069,-99)    );
  // itree = 3
  fBoostWeights.push_back(0.600388);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.720067,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.464899,-99) , 
-0.159697, 0, 10, 0, 0.558903,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.542065,-99) , 
NN(
0, 
0, 
-0.79487, 0, -1, -1, 0.160097,-99) , 
-1.52842, 0, 1, 0, 0.516905,-99) , 
NN(
NN(
NN(
0, 
0, 
-4.28944, 0, -1, 1, 0.555823,-99) , 
NN(
0, 
0, 
2.01683, 0, -1, -1, 0.015776,-99) , 
5.8535, 1, 2, 0, 0.34078,-99) , 
NN(
0, 
0, 
-2.42883, 0, -1, -1, 0.0246042,-99) , 
-0.989133, 1, 0, 0, 0.0742134,-99) , 
4.05114, 1, 2, 0, 0.495222,-99)    );
  // itree = 4
  fBoostWeights.push_back(0.752668);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.650165,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.351759,-99) , 
-1.68992, 0, 4, 0, 0.620065,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.606492,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.644374,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.311967,-99) , 
1.20116, 0, 8, 0, 0.420253,-99) , 
NN(
0, 
0, 
-0.674382, 0, -1, -1, 0.0672692,-99) , 
-2.18962, 0, 6, 0, 0.310287,-99) , 
4.12344, 1, 0, 0, 0.570721,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.686522,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.21606,-99) , 
-2.21938, 1, 7, 0, 0.33563,-99) , 
NN(
0, 
0, 
5.23845, 1, -1, -1, 0.0589307,-99) , 
2.96109, 1, 6, 0, 0.225263,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.30703, 0, 8, 0, 0.088561,-99) , 
4.05114, 1, 2, 0, 0.551705,-99)    );
  // itree = 5
  fBoostWeights.push_back(0.543773);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-16.4144, 1, -1, 1, 0.622772,-99) , 
NN(
0, 
0, 
-3.08788, 0, -1, -1, 0.432905,-99) , 
-0.401402, 0, 11, 0, 0.538203,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.531245,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.333305,-99) , 
-1.7221, 1, 7, 0, 0.404554,-99) , 
NN(
0, 
0, 
-0.84145, 0, -1, -1, 0.205011,-99) , 
-6.0395, 0, 8, 0, 0.359916,-99) , 
-0.686563, 0, 9, 0, 0.456445,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.447433,-99)    );
  // itree = 6
  fBoostWeights.push_back(0.321116);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-14.1078, 0, -1, 1, 0.835331,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.511247,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0453426,-99) , 
1.88052, 1, 9, 0, 0.500728,-99) , 
-17.6557, 1, 8, 0, 0.518305,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.730732,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.390721,-99) , 
0.73604, 0, 10, 0, 0.413302,-99) , 
NN(
0, 
0, 
-1.5536, 0, -1, -1, 0.112598,-99) , 
2.6814, 1, 6, 0, 0.384004,-99) , 
-1.04737, 0, 9, 0, 0.473695,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.466304,-99)    );
  // itree = 7
  fBoostWeights.push_back(0.314604);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.71837,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.457766,-99) , 
-20.8868, 1, 8, 0, 0.468832,-99) , 
NN(
0, 
0, 
2.58526, 1, -1, -1, 0.203429,-99) , 
3.36737, 1, 2, 0, 0.455899,-99) , 
NN(
0, 
0, 
0.339332, 0, -1, -1, 0.125284,-99) , 
-3.13229, 0, 11, 0, 0.444799,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.438812,-99)    );
  // itree = 8
  fBoostWeights.push_back(0.256137);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
0.425971, 0, -1, 1, 0.540849,-99) , 
NN(
0, 
0, 
2.58526, 1, -1, -1, 0.259149,-99) , 
3.36737, 1, 2, 0, 0.528148,-99) , 
NN(
0, 
0, 
0.339332, 0, -1, -1, 0.164007,-99) , 
-3.13229, 0, 11, 0, 0.517103,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.511081,-99)    );
  // itree = 9
  fBoostWeights.push_back(0.428186);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.599591,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.15329, 0, 6, 0, 0.582269,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.51018,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.322663,-99) , 
0.538214, 1, 8, 0, 0.45853,-99) , 
0.946369, 0, 3, 0, 0.503974,-99) , 
NN(
NN(
0, 
0, 
-3.15355, 1, -1, 1, 0.602754,-99) , 
NN(
0, 
0, 
-1.19789, 0, -1, -1, 0.363004,-99) , 
0.425971, 0, 10, 0, 0.392018,-99) , 
-1.55347, 0, 8, 0, 0.462286,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.457511,-99)    );
  // itree = 10
  fBoostWeights.push_back(0.464036);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.614568,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.380169,-99) , 
1.51769, 1, 2, 0, 0.54934,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.538633,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.392839,-99) , 
-1.09063, 1, 1, 0, 0.418197,-99) , 
-1.92268, 1, 7, 0, 0.463894,-99) , 
NN(
0, 
0, 
-1.73683, 0, -1, -1, 0.25285,-99) , 
-2.42748, 0, 11, 0, 0.451985,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.448129,-99)    );
  // itree = 11
  fBoostWeights.push_back(0.357887);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.579258,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.458712,-99) , 
-1.0938, 0, 10, 0, 0.54141,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.729573,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.410079,-99) , 
-18.3166, 1, 8, 0, 0.41988,-99) , 
-0.377706, 0, 4, 0, 0.494109,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.490814,-99) , 
NN(
0, 
0, 
-1.81242, 0, -1, -1, 0.224689,-99) , 
-1.65067, 0, 1, 0, 0.483447,-99)    );
  // itree = 12
  fBoostWeights.push_back(0.321903);
  fForest.push_back( 
NN(
NN(
0, 
0, 
0.132044, 1, -1, 1, 0.579328,-99) , 
NN(
NN(
NN(
0, 
0, 
0.462771, 0, -1, 1, 0.500932,-99) , 
NN(
0, 
0, 
-5.58302, 0, -1, -1, 0.217758,-99) , 
-1.64202, 0, 1, 0, 0.490088,-99) , 
NN(
0, 
0, 
-12.6641, 0, -1, -1, 0.343303,-99) , 
1.52729, 1, 1, 0, 0.470358,-99) , 
-0.207574, 1, 0, 0, 0.49648,-99)    );
  // itree = 13
  fBoostWeights.push_back(0.145211);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.608434,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0366546,-99) , 
2.0653, 1, 9, 0, 0.596461,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.500501,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.67947, 1, 2, 0, 0.497054,-99) , 
0.192237, 0, 9, 0, 0.519887,-99) , 
NN(
0, 
0, 
-4.94789, 0, -1, -1, 0.0319424,-99) , 
-4.54192, 0, 11, 0, 0.515504,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.512574,-99)    );
  // itree = 14
  fBoostWeights.push_back(0.250136);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.576373,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0204452,-99) , 
2.16805, 1, 9, 0, 0.559662,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.505477,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.431871,-99) , 
-1.0634, 1, 9, 0, 0.463536,-99) , 
0.169874, 0, 9, 0, 0.486048,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.483576,-99) , 
NN(
0, 
0, 
-0.0163151, 0, -1, -1, 0.249421,-99) , 
-1.65067, 0, 1, 0, 0.478001,-99)    );
  // itree = 15
  fBoostWeights.push_back(0.167482);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.665867,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.473008,-99) , 
1.03638, 0, 10, 0, 0.480744,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.84988,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.72168, 1, 10, 0, 0.0757229,-99) , 
-4.18349, 0, 6, 0, 0.477545,-99) , 
NN(
0, 
0, 
-4.94789, 0, -1, -1, 0.0405746,-99) , 
-4.54192, 0, 11, 0, 0.473996,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.471757,-99)    );
  // itree = 16
  fBoostWeights.push_back(0.132846);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.522017,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0199716,-99) , 
5.67947, 1, 2, 0, 0.519271,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.827238,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.72168, 1, 10, 0, 0.0755387,-99) , 
-4.18349, 0, 6, 0, 0.516032,-99) , 
NN(
0, 
0, 
-5.75664, 0, -1, -1, 0.0426342,-99) , 
-4.54192, 0, 11, 0, 0.512459,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.510225,-99)    );
  // itree = 17
  fBoostWeights.push_back(0.164796);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.611189,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.474861,-99) , 
-1.26197, 1, 1, 0, 0.486939,-99) , 
NN(
0, 
0, 
-0.77526, 0, -1, -1, 0.254597,-99) , 
-1.67577, 0, 1, 0, 0.483058,-99) , 
NN(
NN(
0, 
0, 
0.935322, 0, -1, 1, 0.507683,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
1.99035, 1, 6, 0, 0.0995311,-99) , 
5.42415, 1, 2, 0, 0.480566,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.00694697,-99) , 
11.548, 1, 0, 0, 0.478546,-99)    );
  // itree = 18
  fBoostWeights.push_back(0.124045);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
0.555201, 0, -1, 1, 0.521244,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.519414,-99) , 
NN(
0, 
0, 
-2.57018, 1, -1, -1, 0.0243715,-99) , 
5.99832, 1, 2, 0, 0.517215,-99) , 
NN(
NN(
NN(
0, 
0, 
-4.6871, 0, -1, 1, 0.556673,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.08632, 1, 8, 0, 0.42331,-99) , 
NN(
0, 
0, 
4.28922, 1, -1, -1, 0.122213,-99) , 
-0.0163151, 0, 8, 0, 0.289594,-99) , 
-1.65067, 0, 1, 0, 0.512586,-99)    );
  // itree = 19
  fBoostWeights.push_back(0.0719343);
  fForest.push_back( 
NN(
NN(
0, 
0, 
11.548, 1, -1, -1, 0.485389,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, 1, 0.58846,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0321116,-99) , 
-20.074, 0, 8, 0, 0.138169,-99) , 
-25.7112, 0, 7, 0, 0.482739,-99)    );
  // itree = 20
  fBoostWeights.push_back(0.0761407);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.509709,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.030895,-99) , 
2.14318, 1, 9, 0, 0.506974,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.505277,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.00827098,-99) , 
11.548, 1, 0, 0, 0.503369,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, 1, 0.58175,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0320669,-99) , 
-20.074, 0, 8, 0, 0.137711,-99) , 
-25.7112, 0, 7, 0, 0.500665,-99)    );
  // itree = 21
  fBoostWeights.push_back(0.0731765);
  fForest.push_back( 
NN(
NN(
0, 
0, 
11.548, 1, -1, -1, 0.484813,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, 1, 0.574285,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0320162,-99) , 
-20.074, 0, 8, 0, 0.137193,-99) , 
-25.7112, 0, 7, 0, 0.482328,-99)    );
  // itree = 22
  fBoostWeights.push_back(0.0668715);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.508499,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.506988,-99) , 
NN(
0, 
0, 
1.89785, 1, -1, -1, 0.110133,-99) , 
5.42415, 1, 2, 0, 0.504872,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.00959018,-99) , 
11.548, 1, 0, 0, 0.503102,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, 1, 0.566755,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0319639,-99) , 
-20.074, 0, 8, 0, 0.13666,-99) , 
-25.7112, 0, 7, 0, 0.500565,-99)    );
  // itree = 23
  fBoostWeights.push_back(0.064601);
  fForest.push_back( 
NN(
NN(
0, 
0, 
11.548, 1, -1, -1, 0.486736,-99) , 
NN(
NN(
0, 
0, 
1.14964, 1, -1, 1, 0.559564,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0319127,-99) , 
-20.074, 0, 8, 0, 0.136142,-99) , 
-25.7112, 0, 7, 0, 0.484378,-99)    );
  // itree = 24
  fBoostWeights.push_back(0.0656565);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.508348,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.109713,-99) , 
-2.08533, 0, 0, 0, 0.506518,-99) , 
NN(
0, 
0, 
1.89785, 1, -1, -1, 0.115795,-99) , 
5.42415, 1, 2, 0, 0.504538,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0109229,-99) , 
11.548, 1, 0, 0, 0.502883,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, 1, 0.552368,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0318601,-99) , 
-20.074, 0, 8, 0, 0.135614,-99) , 
-25.7112, 0, 7, 0, 0.500481,-99)    );
  // itree = 25
  fBoostWeights.push_back(0.134872);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.514424,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.458808,-99) , 
0.468879, 1, 2, 0, 0.492343,-99) , 
NN(
0, 
0, 
-2.57018, 1, -1, -1, 0.0297255,-99) , 
5.99832, 1, 2, 0, 0.490741,-99) , 
NN(
0, 
0, 
0.168214, 0, -1, -1, 0.290757,-99) , 
-1.65067, 0, 1, 0, 0.486851,-99) , 
NN(
0, 
0, 
-20.074, 0, -1, -1, 0.135055,-99) , 
-25.7112, 0, 7, 0, 0.484614,-99)    );
  // itree = 26
  fBoostWeights.push_back(0.363561);
  fForest.push_back( 
NN(
NN(
0, 
0, 
2.11547, 0, -1, 1, 0.50824,-99) , 
NN(
NN(
NN(
0, 
0, 
-10.7417, 0, -1, 1, 0.961756,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.661984,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.422723,-99) , 
1.94345, 0, 8, 0, 0.443816,-99) , 
-17.2967, 1, 8, 0, 0.457429,-99) , 
NN(
0, 
0, 
0.382776, 1, -1, -1, 0.172401,-99) , 
-11.8069, 0, 7, 0, 0.44236,-99) , 
1.02986, 1, 0, 0, 0.478142,-99)    );
  // itree = 27
  fBoostWeights.push_back(0.290788);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-2.25642, 0, -1, 1, 0.896452,-99) , 
NN(
NN(
0, 
0, 
-10.3335, 1, -1, 1, 0.547045,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.630889,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.126721,-99) , 
-4.45437, 0, 8, 0, 0.266823,-99) , 
-7.74616, 0, 7, 0, 0.540422,-99) , 
-15.3555, 1, 8, 0, 0.547212,-99) , 
NN(
NN(
0, 
0, 
-1.28823, 0, -1, 1, 0.744557,-99) , 
NN(
0, 
0, 
0.234872, 1, -1, -1, 0.299884,-99) , 
-9.04619, 0, 8, 0, 0.400827,-99) , 
-10.5333, 0, 7, 0, 0.538758,-99)    );
  // itree = 28
  fBoostWeights.push_back(0.225385);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.562423,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.477569,-99) , 
0.563465, 0, 11, 0, 0.497148,-99) , 
NN(
0, 
0, 
3.47707, 1, -1, -1, 0.0356329,-99) , 
3.12646, 1, 11, 0, 0.494077,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.558914,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.402341,-99) , 
-1.81469, 1, 5, 0, 0.467574,-99) , 
NN(
0, 
0, 
-2.46736, 0, -1, -1, 0.298753,-99) , 
-0.751251, 0, 8, 0, 0.399493,-99) , 
-1.33452, 0, 11, 0, 0.476069,-99) , 
NN(
0, 
0, 
3.57404, 1, -1, -1, 0.17622,-99) , 
3.08482, 1, 8, 0, 0.473092,-99)    );
  // itree = 29
  fBoostWeights.push_back(0.162255);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.520881,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0187249,-99) , 
5.65163, 1, 2, 0, 0.518802,-99) , 
NN(
0, 
0, 
-0.54131, 0, -1, -1, 0.30039,-99) , 
-2.89637, 0, 4, 0, 0.513143,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.732632,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.147717,-99) , 
-2.38159, 1, 5, 0, 0.647263,-99) , 
NN(
0, 
0, 
3.48708, 1, -1, -1, 0.245679,-99) , 
4.89226, 0, 0, 0, 0.353754,-99) , 
1.90868, 1, 7, 0, 0.506692,-99) , 
NN(
NN(
0, 
0, 
1.42031, 0, -1, 1, 0.577793,-99) , 
NN(
0, 
0, 
7.43856, 0, -1, -1, 0.126744,-99) , 
-1.96838, 0, 11, 0, 0.198955,-99) , 
8.45445, 1, 0, 0, 0.503144,-99)    );
  // itree = 30
  fBoostWeights.push_back(0.128098);
  fForest.push_back( 
NN(
0, 
0, 
-2.06372, 0, -1, -1, 0.468019,-99)    );
  // itree = 31
  fBoostWeights.push_back(0.156995);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.522707,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.136737,-99) , 
3.08053, 1, 8, 0, 0.520601,-99) , 
NN(
0, 
0, 
3.33371, 1, -1, -1, 0.181887,-99) , 
2.59874, 1, 11, 0, 0.516902,-99) , 
NN(
0, 
0, 
-3.97594, 0, -1, -1, 0.391815,-99) , 
-1.72267, 0, 11, 0, 0.502032,-99) , 
NN(
0, 
0, 
-3.19647, 1, -1, -1, 0.0899029,-99) , 
-2.06372, 0, 0, 0, 0.5,-99)    );
  // itree = 32
  fBoostWeights.push_back(0.168088);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.555552,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.46636,-99) , 
0.537264, 0, 10, 0, 0.477193,-99) , 
NN(
0, 
0, 
-2.53962, 1, -1, -1, 0.030234,-99) , 
3.21103, 1, 11, 0, 0.475262,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.670409,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.47015, 1, 9, 0, 0.360004,-99) , 
NN(
0, 
0, 
5.30755, 0, -1, -1, 0.0124384,-99) , 
4.17776, 0, 3, 0, 0.0229063,-99) , 
2.19989, 1, 9, 0, 0.472872,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.47143,-99)    );
  // itree = 33
  fBoostWeights.push_back(0.0722292);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.510852,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.77618, 0, 6, 0, 0.509281,-99) , 
NN(
0, 
0, 
-0.281978, 1, -1, -1, 0.0115106,-99) , 
3.26928, 1, 11, 0, 0.507455,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.519385,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.44355, 1, 3, 0, 0.210255,-99) , 
NN(
0, 
0, 
-5.74372, 0, -1, -1, 0.0159098,-99) , 
-4.94789, 0, 11, 0, 0.0496138,-99) , 
-4.54192, 0, 11, 0, 0.505144,-99) , 
NN(
0, 
0, 
-3.19647, 1, -1, -1, 0.106469,-99) , 
-2.06372, 0, 0, 0, 0.503314,-99)    );
  // itree = 34
  fBoostWeights.push_back(0.244105);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.534087,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.442154,-99) , 
-4.46213, 0, 7, 0, 0.516582,-99) , 
NN(
0, 
0, 
-0.984611, 0, -1, -1, 0.17049,-99) , 
-4.03539, 0, 9, 0, 0.512132,-99) , 
NN(
NN(
0, 
0, 
0.995759, 0, -1, 1, 0.662366,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.664051,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.417995,-99) , 
-12.2138, 1, 8, 0, 0.4284,-99) , 
-2.37143, 1, 9, 0, 0.442552,-99) , 
-0.184442, 1, 10, 0, 0.487237,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.485821,-99)    );
  // itree = 35
  fBoostWeights.push_back(0.081148);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
3.21103, 1, -1, -1, 0.48331,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.668095,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.47015, 1, 9, 0, 0.385443,-99) , 
NN(
0, 
0, 
5.30755, 0, -1, -1, 0.0155664,-99) , 
4.17776, 0, 3, 0, 0.0265769,-99) , 
2.19989, 1, 9, 0, 0.481,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.479753,-99)    );
  // itree = 36
  fBoostWeights.push_back(0.0591235);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.507527,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.128134,-99) , 
-4.21063, 0, 6, 0, 0.505386,-99) , 
NN(
0, 
0, 
-2.53962, 1, -1, -1, 0.0342608,-99) , 
3.21103, 1, 11, 0, 0.503591,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0278047,-99) , 
2.19989, 1, 9, 0, 0.501274,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500026,-99)    );
  // itree = 37
  fBoostWeights.push_back(0.0570954);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-9835, 0, -1, -1, 0.486991,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501458,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.46745, 1, 5, 0, 0.363673,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.59053, 1, 3, 0, 0.0268011,-99) , 
6.33484, 1, 1, 0, 0.48573,-99)    );
  // itree = 38
  fBoostWeights.push_back(0.049651);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.506286,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0386064,-99) , 
3.21103, 1, 11, 0, 0.504604,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0313418,-99) , 
2.19989, 1, 9, 0, 0.50243,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.501262,-99) , 
NN(
0, 
0, 
-2.59053, 1, -1, -1, 0.0267592,-99) , 
6.33484, 1, 1, 0, 0.499996,-99)    );
  // itree = 39
  fBoostWeights.push_back(0.0485298);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-4.54192, 0, -1, -1, 0.489454,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.509622,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0471482,-99) , 
-3.19647, 1, 8, 0, 0.121383,-99) , 
-2.06372, 0, 0, 0, 0.487904,-99)    );
  // itree = 40
  fBoostWeights.push_back(0.0510452);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.506471,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.77618, 0, 6, 0, 0.505094,-99) , 
NN(
0, 
0, 
-0.281978, 1, -1, -1, 0.0142755,-99) , 
3.26928, 1, 11, 0, 0.503535,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.517591,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.44355, 1, 3, 0, 0.221634,-99) , 
NN(
0, 
0, 
-5.74372, 0, -1, -1, 0.022791,-99) , 
-4.94789, 0, 11, 0, 0.0604958,-99) , 
-4.54192, 0, 11, 0, 0.501576,-99) , 
NN(
0, 
0, 
-3.19647, 1, -1, -1, 0.12263,-99) , 
-2.06372, 0, 0, 0, 0.500009,-99)    );
  // itree = 41
  fBoostWeights.push_back(0.118229);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.55437,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.480146,-99) , 
0.389633, 0, 10, 0, 0.491943,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0332917,-99) , 
2.19989, 1, 9, 0, 0.489911,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.488801,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502832,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.46745, 1, 5, 0, 0.369798,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.59053, 1, 3, 0, 0.028069,-99) , 
6.33484, 1, 1, 0, 0.4876,-99)    );
  // itree = 42
  fBoostWeights.push_back(0.0796908);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.514048,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.77618, 0, 6, 0, 0.512732,-99) , 
NN(
0, 
0, 
-0.281978, 1, -1, -1, 0.0168017,-99) , 
3.26928, 1, 11, 0, 0.511273,-99) , 
NN(
0, 
0, 
-4.94789, 0, -1, -1, 0.0630919,-99) , 
-4.54192, 0, 11, 0, 0.509388,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.520465,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.051698,-99) , 
-3.19647, 1, 8, 0, 0.129198,-99) , 
-2.06372, 0, 0, 0, 0.507845,-99)    );
  // itree = 43
  fBoostWeights.push_back(0.0463334);
  fForest.push_back( 
NN(
0, 
0, 
6.33484, 1, -1, -1, 0.488419,-99)    );
  // itree = 44
  fBoostWeights.push_back(0.0475001);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.50602,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.153464,-99) , 
-4.21063, 0, 6, 0, 0.504227,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0369485,-99) , 
2.19989, 1, 9, 0, 0.502275,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.501187,-99) , 
NN(
0, 
0, 
-2.59053, 1, -1, -1, 0.02716,-99) , 
6.33484, 1, 1, 0, 0.5,-99)    );
  // itree = 45
  fBoostWeights.push_back(0.0462087);
  fForest.push_back( 
NN(
0, 
0, 
6.33484, 1, -1, -1, 0.48845,-99)    );
  // itree = 46
  fBoostWeights.push_back(0.051636);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.506597,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.280969,-99) , 
2.88594, 1, 8, 0, 0.504296,-99) , 
NN(
0, 
0, 
1.39761, 0, -1, -1, 0.211952,-99) , 
-1.76082, 0, 0, 0, 0.502222,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0172998,-99) , 
11.548, 1, 0, 0, 0.50113,-99) , 
NN(
0, 
0, 
-2.59053, 1, -1, -1, 0.0297488,-99) , 
6.33484, 1, 1, 0, 0.5,-99)    );
  // itree = 47
  fBoostWeights.push_back(0.0494799);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
5.65163, 1, -1, -1, 0.490546,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.525714,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.55906, 0, 11, 0, 0.23441,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.0384191,-99) , 
2.19989, 1, 9, 0, 0.488695,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.487648,-99)    );
  // itree = 48
  fBoostWeights.push_back(0.0442904);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.505602,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0520217,-99) , 
3.21103, 1, 11, 0, 0.504249,-99) , 
NN(
0, 
0, 
0.0726926, 1, -1, -1, 0.0270072,-99) , 
5.65163, 1, 2, 0, 0.502915,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.513363,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.55906, 0, 11, 0, 0.231922,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.0383517,-99) , 
2.19989, 1, 9, 0, 0.501055,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500008,-99)    );
  // itree = 49
  fBoostWeights.push_back(0.0544634);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501583,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.424762,-99) , 
1.31648, 1, 8, 0, 0.493242,-99) , 
NN(
0, 
0, 
0.0726926, 1, -1, -1, 0.0281957,-99) , 
5.65163, 1, 2, 0, 0.491969,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0382887,-99) , 
2.19989, 1, 9, 0, 0.490189,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.489187,-99)    );
  // itree = 50
  fBoostWeights.push_back(0.235967);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
0.457854, 0, -1, 1, 0.88808,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.728399,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.1802,-99) , 
-30.6092, 1, 8, 0, 0.4178,-99) , 
-12.2716, 0, 7, 0, 0.6315,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.539563,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.432115,-99) , 
1.35087, 1, 8, 0, 0.509877,-99) , 
NN(
0, 
0, 
-2.19981, 0, -1, -1, 0.452228,-99) , 
-0.122186, 0, 8, 0, 0.47504,-99) , 
-18.7065, 1, 8, 0, 0.480232,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, -1, 0.479987,-99) , 
NN(
NN(
0, 
0, 
-37.59, 1, -1, 1, 0.515921,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.11079, 0, 5, 0, 0.0726983,-99) , 
-20.074, 0, 8, 0, 0.159597,-99) , 
-25.7112, 0, 7, 0, 0.478717,-99)    );
  // itree = 51
  fBoostWeights.push_back(0.369609);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-3.19623, 0, -1, 1, 0.648343,-99) , 
NN(
0, 
0, 
1.30855, 1, -1, -1, 0.476032,-99) , 
1.17632, 1, 1, 0, 0.586895,-99) , 
NN(
NN(
0, 
0, 
-12.6502, 1, -1, 1, 0.56965,-99) , 
NN(
0, 
0, 
0.279881, 1, -1, -1, 0.0813771,-99) , 
-0.121825, 0, 11, 0, 0.26723,-99) , 
-1.50404, 0, 6, 0, 0.560816,-99) , 
NN(
NN(
NN(
0, 
0, 
3.52792, 1, -1, 1, 0.792442,-99) , 
NN(
0, 
0, 
2.44604, 1, -1, -1, 0.204654,-99) , 
-1.29394, 0, 2, 0, 0.675994,-99) , 
NN(
NN(
0, 
0, 
0.452485, 0, -1, 1, 0.629339,-99) , 
NN(
0, 
0, 
-1.761, 0, -1, -1, 0.448077,-99) , 
-2.18271, 1, 7, 0, 0.472926,-99) , 
1.92321, 0, 8, 0, 0.486003,-99) , 
-2.82073, 1, 8, 0, 0.502298,-99)    );
  // itree = 52
  fBoostWeights.push_back(0.350932);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.59937,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.21398,-99) , 
-3.3396, 0, 11, 0, 0.596185,-99) , 
NN(
0, 
0, 
0.639457, 1, -1, -1, 0.385925,-99) , 
1.87806, 1, 11, 0, 0.590119,-99) , 
NN(
NN(
0, 
0, 
2.62306, 1, -1, 1, 0.614376,-99) , 
NN(
0, 
0, 
1.61212, 1, -1, -1, 0.405644,-99) , 
3.28718, 0, 0, 0, 0.486928,-99) , 
1.31054, 1, 7, 0, 0.57482,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.543623,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.456183,-99) , 
0.516393, 0, 3, 0, 0.483437,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.551981,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.138642,-99) , 
-0.286893, 0, 11, 0, 0.331932,-99) , 
-1.17157, 0, 1, 0, 0.472741,-99) , 
NN(
0, 
0, 
-20.074, 0, -1, -1, 0.0897071,-99) , 
-26.8061, 0, 7, 0, 0.46871,-99) , 
-1.42655, 0, 7, 0, 0.533666,-99)    );
  // itree = 53
  fBoostWeights.push_back(0.166438);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1.41909, 0, -1, 1, 0.530453,-99) , 
NN(
0, 
0, 
-2.60954, 1, -1, -1, 0.0394008,-99) , 
5.65163, 1, 2, 0, 0.528806,-99) , 
NN(
0, 
0, 
-1.28327, 0, -1, -1, 0.0156905,-99) , 
-2.31748, 0, 0, 0, 0.52673,-99) , 
NN(
NN(
NN(
0, 
0, 
-9.39108, 0, -1, 1, 0.921187,-99) , 
NN(
0, 
0, 
-7.54122, 0, -1, -1, 0.48054,-99) , 
-15.2543, 1, 8, 0, 0.488501,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.809042,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.174262,-99) , 
-19.288, 0, 7, 0, 0.488804,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.570632,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.10794,-99) , 
-7.71125, 0, 8, 0, 0.176098,-99) , 
-26.9761, 1, 8, 0, 0.275011,-99) , 
-10.3035, 0, 7, 0, 0.477383,-99) , 
1.02986, 1, 0, 0, 0.504973,-99)    );
  // itree = 54
  fBoostWeights.push_back(0.156749);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
2.48305, 1, -1, 1, 0.570028,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.681131,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.327587,-99) , 
-2.14005, 0, 8, 0, 0.379488,-99) , 
-3.06053, 0, 7, 0, 0.535003,-99) , 
NN(
0, 
0, 
-1.75974, 0, -1, -1, 0.486576,-99) , 
1.64857, 0, 0, 0, 0.501985,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.129557,-99) , 
-25.7112, 0, 7, 0, 0.500381,-99)    );
  // itree = 55
  fBoostWeights.push_back(0.16625);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
1.21893, 0, -1, 1, 0.594221,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.526078,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0863591,-99) , 
-2.85098, 0, 11, 0, 0.524347,-99) , 
1.58935, 0, 0, 0, 0.533832,-99) , 
NN(
0, 
0, 
1.4951, 0, -1, -1, 0.219467,-99) , 
-1.87101, 0, 0, 0, 0.531854,-99) , 
NN(
NN(
NN(
0, 
0, 
-19.5765, 1, -1, 1, 0.940328,-99) , 
NN(
0, 
0, 
-6.44283, 0, -1, -1, 0.474828,-99) , 
-17.2967, 1, 8, 0, 0.485743,-99) , 
NN(
NN(
0, 
0, 
-0.204015, 1, -1, 1, 0.665963,-99) , 
NN(
0, 
0, 
-24.2824, 1, -1, -1, 0.0924393,-99) , 
-41.2987, 1, 8, 0, 0.18651,-99) , 
-11.8069, 0, 7, 0, 0.471983,-99) , 
2.26729, 1, 0, 0, 0.518681,-99)    );
  // itree = 56
  fBoostWeights.push_back(0.0694847);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.590223,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.492471,-99) , 
2.14006, 0, 4, 0, 0.499379,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0434763,-99) , 
2.19989, 1, 9, 0, 0.497877,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.49695,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.69756,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.03178, 0, 4, 0, 0.421147,-99) , 
NN(
0, 
0, 
-20.074, 0, -1, -1, 0.0797893,-99) , 
2.11079, 0, 5, 0, 0.124761,-99) , 
-25.7112, 0, 7, 0, 0.495399,-99)    );
  // itree = 57
  fBoostWeights.push_back(0.12342);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.527525,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.474187,-99) , 
-1.33889, 0, 9, 0, 0.514302,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0464593,-99) , 
2.19989, 1, 9, 0, 0.512808,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.511885,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.682703,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.03178, 0, 4, 0, 0.415686,-99) , 
NN(
0, 
0, 
-20.074, 0, -1, -1, 0.0850423,-99) , 
2.11079, 0, 5, 0, 0.128881,-99) , 
-25.7112, 0, 7, 0, 0.510333,-99)    );
  // itree = 58
  fBoostWeights.push_back(0.150364);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
0.791216, 0, -1, 1, 0.577369,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.519737,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.4565,-99) , 
-0.31304, 1, 11, 0, 0.489385,-99) , 
-2.32089, 1, 10, 0, 0.49741,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.496567,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, -1, 0.352948,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.674895,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
1.11159, 0, 0, 0, 0.459039,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.11079, 0, 5, 0, 0.0709682,-99) , 
-20.074, 0, 8, 0, 0.136785,-99) , 
-25.7112, 0, 7, 0, 0.495176,-99)    );
  // itree = 59
  fBoostWeights.push_back(0.0381849);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-9835.01, 0, -1, -1, 0.492681,-99) , 
NN(
NN(
0, 
0, 
-29.0513, 1, -1, -1, 0.392939,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.509127,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.12126, 0, 5, 0, 0.0729793,-99) , 
-20.074, 0, 8, 0, 0.151801,-99) , 
-25.9842, 0, 7, 0, 0.491466,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0174926,-99) , 
11.548, 1, 0, 0, 0.490546,-99)    );
  // itree = 60
  fBoostWeights.push_back(0.0389267);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.504857,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.163879,-99) , 
1.79246, 1, 9, 0, 0.503037,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.502271,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0182833,-99) , 
11.548, 1, 0, 0, 0.501351,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, -1, 0.383613,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.895819,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.444955,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0703903,-99) , 
-20.074, 0, 8, 0, 0.146851,-99) , 
-25.7112, 0, 7, 0, 0.500072,-99)    );
  // itree = 61
  fBoostWeights.push_back(0.0869523);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.566767,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.486169,-99) , 
-1.27944, 1, 1, 0, 0.493513,-99) , 
NN(
0, 
0, 
2.29857, 0, -1, -1, 0.0454452,-99) , 
6.34167, 1, 1, 0, 0.492672,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0189952,-99) , 
11.548, 1, 0, 0, 0.491788,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, -1, 0.378494,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.892129,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.444043,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0703674,-99) , 
-20.074, 0, 8, 0, 0.146332,-99) , 
-25.7112, 0, 7, 0, 0.490561,-99)    );
  // itree = 62
  fBoostWeights.push_back(0.102946);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.520488,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.465596,-99) , 
-1.00234, 0, 1, 0, 0.511297,-99) , 
NN(
0, 
0, 
2.29857, 0, -1, -1, 0.0452922,-99) , 
6.34167, 1, 1, 0, 0.510456,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0206851,-99) , 
11.548, 1, 0, 0, 0.509579,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, -1, 0.366846,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.883472,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.441888,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0703131,-99) , 
-20.074, 0, 8, 0, 0.145111,-99) , 
-25.7112, 0, 7, 0, 0.508327,-99)    );
  // itree = 63
  fBoostWeights.push_back(0.034775);
  fForest.push_back( 
NN(
NN(
0, 
0, 
11.548, 1, -1, -1, 0.492604,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, -1, 0.391068,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.872448,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.439113,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0702425,-99) , 
-20.074, 0, 8, 0, 0.153489,-99) , 
-25.7112, 0, 7, 0, 0.491484,-99)    );
  // itree = 64
  fBoostWeights.push_back(0.0328146);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.50414,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0641894,-99) , 
2.14318, 1, 9, 0, 0.502836,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.5021,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0236671,-99) , 
11.548, 1, 0, 0, 0.501297,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, -1, 0.38621,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.868528,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.438117,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0702169,-99) , 
-20.074, 0, 8, 0, 0.152949,-99) , 
-25.7112, 0, 7, 0, 0.500163,-99)    );
  // itree = 65
  fBoostWeights.push_back(0.0322108);
  fForest.push_back( 
NN(
NN(
0, 
0, 
11.548, 1, -1, -1, 0.493192,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, -1, 0.381584,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.864735,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.43715,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0701921,-99) , 
-20.074, 0, 8, 0, 0.152425,-99) , 
-25.7112, 0, 7, 0, 0.492097,-99)    );
  // itree = 66
  fBoostWeights.push_back(0.0349657);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.50442,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.177193,-99) , 
1.79246, 1, 9, 0, 0.502733,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.502021,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0252171,-99) , 
11.548, 1, 0, 0, 0.501245,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, -1, 0.377005,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.860923,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.436174,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0701668,-99) , 
-20.074, 0, 8, 0, 0.151898,-99) , 
-25.7112, 0, 7, 0, 0.500136,-99)    );
  // itree = 67
  fBoostWeights.push_back(0.0855868);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.570639,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.486476,-99) , 
-1.27944, 1, 1, 0, 0.494167,-99) , 
NN(
0, 
0, 
2.29857, 0, -1, -1, 0.0451231,-99) , 
6.34167, 1, 1, 0, 0.493394,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0260911,-99) , 
11.548, 1, 0, 0, 0.492645,-99) , 
NN(
NN(
0, 
0, 
-0.1709, 0, -1, -1, 0.385252,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.856683,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.435083,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0701386,-99) , 
-20.074, 0, 8, 0, 0.154872,-99) , 
-25.7112, 0, 7, 0, 0.491587,-99)    );
  // itree = 68
  fBoostWeights.push_back(0.108435);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.522029,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.37429, 1, 11, 0, 0.520848,-99) , 
NN(
0, 
0, 
-4.69302, 0, -1, -1, 0.464003,-99) , 
-1.33452, 0, 11, 0, 0.51086,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
4.04834, 1, 7, 0, 0.510145,-99) , 
NN(
NN(
0, 
0, 
-28.8629, 1, -1, -1, 0.372808,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.651628,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-37.59, 1, 8, 0, 0.433909,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.11079, 0, 5, 0, 0.0700651,-99) , 
-20.074, 0, 8, 0, 0.153378,-99) , 
-25.7112, 0, 7, 0, 0.509063,-99)    );
  // itree = 69
  fBoostWeights.push_back(0.0330468);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-9835, 0, -1, -1, 0.492553,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.583454,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.46745, 1, 5, 0, 0.422836,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.59053, 1, 3, 0, 0.0400955,-99) , 
6.33484, 1, 1, 0, 0.491759,-99)    );
  // itree = 70
  fBoostWeights.push_back(0.0294689);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503714,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0778661,-99) , 
3.21103, 1, 11, 0, 0.502658,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0695339,-99) , 
2.19989, 1, 9, 0, 0.501504,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500814,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.575401,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.46745, 1, 5, 0, 0.41859,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.59053, 1, 3, 0, 0.040057,-99) , 
6.33484, 1, 1, 0, 0.500018,-99)    );
  // itree = 71
  fBoostWeights.push_back(0.0300517);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-26.5286, 0, -1, -1, 0.494731,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.586035,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-3.79649, 0, 4, 0, 0.379234,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.654787, 0, 7, 0, 0.213844,-99) , 
-1.8432, 0, 1, 0, 0.493542,-99) , 
NN(
0, 
0, 
-2.59053, 1, -1, -1, 0.0400216,-99) , 
6.33484, 1, 1, 0, 0.492769,-99)    );
  // itree = 72
  fBoostWeights.push_back(0.030364);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503832,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.503166,-99) , 
NN(
0, 
0, 
-20.074, 0, -1, -1, 0.134538,-99) , 
-26.5286, 0, 7, 0, 0.502243,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.578727,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-3.79649, 0, 4, 0, 0.37616,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.654787, 0, 7, 0, 0.212863,-99) , 
-1.8432, 0, 1, 0, 0.501031,-99) , 
NN(
0, 
0, 
-2.59053, 1, -1, -1, 0.0399845,-99) , 
6.33484, 1, 1, 0, 0.500257,-99)    );
  // itree = 73
  fBoostWeights.push_back(0.0826895);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.57169,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.487548,-99) , 
2.13258, 0, 3, 0, 0.495359,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.49471,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.571307,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-3.79649, 0, 4, 0, 0.373011,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.654787, 0, 7, 0, 0.211851,-99) , 
-1.8432, 0, 1, 0, 0.493538,-99) , 
NN(
0, 
0, 
-2.59053, 1, -1, -1, 0.0399459,-99) , 
6.33484, 1, 1, 0, 0.492786,-99)    );
  // itree = 74
  fBoostWeights.push_back(0.0688798);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.51331,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0846912,-99) , 
2.14318, 1, 9, 0, 0.512202,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835.01, 0, 9, 0, 0.511558,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.897041,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-1.85347, 1, 1, 0, 0.589021,-99) , 
NN(
0, 
0, 
-2.75532, 0, -1, -1, 0.1207,-99) , 
-1.85684, 0, 1, 0, 0.208987,-99) , 
-1.8432, 0, 1, 0, 0.510337,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0398352,-99) , 
6.33484, 1, 1, 0, 0.509586,-99)    );
  // itree = 75
  fBoostWeights.push_back(0.0494854);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.686449,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.492275,-99) , 
-1.8831, 1, 3, 0, 0.494911,-99) , 
NN(
0, 
0, 
2.29475, 0, -1, -1, 0.03271,-99) , 
5.65163, 1, 2, 0, 0.49404,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.40983, 0, 0, 0, 0.493383,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0265712,-99) , 
11.548, 1, 0, 0, 0.492669,-99)    );
  // itree = 76
  fBoostWeights.push_back(0.0440438);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.507912,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0686457,-99) , 
-1.92487, 0, 2, 0, 0.506947,-99) , 
NN(
0, 
0, 
2.29475, 0, -1, -1, 0.0343125,-99) , 
5.65163, 1, 2, 0, 0.506077,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.40983, 0, 0, 0, 0.505421,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0278816,-99) , 
11.548, 1, 0, 0, 0.504707,-99)    );
  // itree = 77
  fBoostWeights.push_back(0.0804641);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.537105,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.486413,-99) , 
1.137, 0, 4, 0, 0.495985,-99) , 
NN(
0, 
0, 
2.29475, 0, -1, -1, 0.0358022,-99) , 
5.65163, 1, 2, 0, 0.495154,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.40983, 0, 0, 0, 0.494526,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0291005,-99) , 
11.548, 1, 0, 0, 0.493844,-99)    );
  // itree = 78
  fBoostWeights.push_back(0.0421784);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1.8831, 1, -1, 1, 0.508509,-99) , 
NN(
0, 
0, 
2.29475, 0, -1, -1, 0.038686,-99) , 
5.65163, 1, 2, 0, 0.507692,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.40983, 0, 0, 0, 0.507073,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0314621,-99) , 
11.548, 1, 0, 0, 0.506401,-99)    );
  // itree = 79
  fBoostWeights.push_back(0.0168985);
  fForest.push_back( 
NN(
NN(
0, 
0, 
4.04834, 1, -1, -1, 0.496899,-99) , 
NN(
NN(
0, 
0, 
-28.8629, 1, -1, -1, 0.421485,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.843189,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.422956,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0674719,-99) , 
-20.074, 0, 8, 0, 0.169102,-99) , 
-25.7112, 0, 7, 0, 0.495949,-99)    );
  // itree = 80
  fBoostWeights.push_back(0.0286969);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503616,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0484174,-99) , 
3.25139, 1, 11, 0, 0.502592,-99) , 
NN(
0, 
0, 
2.59685, 0, -1, -1, 0.0386946,-99) , 
-5.11395, 0, 11, 0, 0.501774,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
4.04834, 1, 7, 0, 0.501124,-99) , 
NN(
NN(
0, 
0, 
-28.8629, 1, -1, -1, 0.418987,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.840942,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.42239,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0674574,-99) , 
-20.074, 0, 8, 0, 0.168788,-99) , 
-25.7112, 0, 7, 0, 0.500166,-99)    );
  // itree = 81
  fBoostWeights.push_back(0.028234);
  fForest.push_back( 
NN(
NN(
0, 
0, 
4.04834, 1, -1, -1, 0.494025,-99) , 
NN(
NN(
0, 
0, 
-28.8629, 1, -1, -1, 0.414718,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.837066,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.421409,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0674324,-99) , 
-20.074, 0, 8, 0, 0.168244,-99) , 
-25.7112, 0, 7, 0, 0.493097,-99)    );
  // itree = 82
  fBoostWeights.push_back(0.0277841);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503501,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0511089,-99) , 
3.25139, 1, 11, 0, 0.502508,-99) , 
NN(
0, 
0, 
2.59685, 0, -1, -1, 0.0408688,-99) , 
-5.11395, 0, 11, 0, 0.501716,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
4.04834, 1, 7, 0, 0.501083,-99) , 
NN(
NN(
0, 
0, 
-28.8629, 1, -1, -1, 0.410484,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.833178,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.420422,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.067407,-99) , 
-20.074, 0, 8, 0, 0.167697,-99) , 
-25.7112, 0, 7, 0, 0.500144,-99)    );
  // itree = 83
  fBoostWeights.push_back(0.0593086);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.606048,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.492885,-99) , 
-3.33696, 1, 9, 0, 0.497016,-99) , 
NN(
0, 
0, 
1.03657, 0, -1, -1, 0.177913,-99) , 
1.80123, 1, 9, 0, 0.495516,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.658709,-99) , 
NN(
0, 
0, 
-0.481938, 1, -1, -1, 0.0636418,-99) , 
-0.916429, 0, 10, 0, 0.215613,-99) , 
-4.11422, 0, 9, 0, 0.493906,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.493296,-99)    );
  // itree = 84
  fBoostWeights.push_back(0.0651032);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.511562,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-6.02959, 0, 4, 0, 0.510764,-99) , 
NN(
0, 
0, 
1.03657, 0, -1, -1, 0.186754,-99) , 
1.80123, 1, 9, 0, 0.509268,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.645253,-99) , 
NN(
0, 
0, 
-0.481938, 1, -1, -1, 0.0672689,-99) , 
-0.916429, 0, 10, 0, 0.216727,-99) , 
-4.11422, 0, 9, 0, 0.507621,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.507012,-99)    );
  // itree = 85
  fBoostWeights.push_back(0.104004);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.735485,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.268788,-99) , 
-1.29287, 0, 2, 0, 0.64823,-99) , 
NN(
0, 
0, 
-3.85414, 0, -1, -1, 0.485369,-99) , 
1.91377, 0, 8, 0, 0.492589,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.98296, 1, 8, 0, 0.491974,-99) , 
NN(
NN(
0, 
0, 
-0.323252, 0, -1, -1, 0.404303,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.827028,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.27705, 0, 6, 0, 0.417413,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0668163,-99) , 
-20.074, 0, 8, 0, 0.165917,-99) , 
-25.7112, 0, 7, 0, 0.49106,-99)    );
  // itree = 86
  fBoostWeights.push_back(0.086928);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.518464,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0576858,-99) , 
3.25139, 1, 11, 0, 0.517508,-99) , 
NN(
0, 
0, 
2.59685, 0, -1, -1, 0.0421811,-99) , 
-5.11395, 0, 11, 0, 0.516748,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
4.04834, 1, 7, 0, 0.516123,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.661199,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.4282, 0, 8, 0, 0.394658,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0662636,-99) , 
0.996961, 0, 11, 0, 0.163777,-99) , 
-25.7112, 0, 7, 0, 0.515172,-99)    );
  // itree = 87
  fBoostWeights.push_back(0.0804297);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.697521,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.27304,-99) , 
-1.29287, 0, 2, 0, 0.615872,-99) , 
NN(
0, 
0, 
-3.85414, 0, -1, -1, 0.489785,-99) , 
1.91377, 0, 8, 0, 0.49519,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.98296, 1, 8, 0, 0.494607,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.641462,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.4282, 0, 8, 0, 0.387541,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0661386,-99) , 
0.996961, 0, 11, 0, 0.162674,-99) , 
-25.7112, 0, 7, 0, 0.493742,-99)    );
  // itree = 88
  fBoostWeights.push_back(0.0729126);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.515335,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0443364,-99) , 
5.65163, 1, 2, 0, 0.51457,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-6.23394, 0, 4, 0, 0.513918,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
4.04834, 1, 7, 0, 0.513334,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.634794,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
1.38487, 1, 11, 0, 0.380636,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0660133,-99) , 
0.996961, 0, 11, 0, 0.161579,-99) , 
-25.7112, 0, 7, 0, 0.512447,-99)    );
  // itree = 89
  fBoostWeights.push_back(0.063427);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.559756,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.491886,-99) , 
-2.34523, 1, 10, 0, 0.497632,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0751371,-99) , 
2.19989, 1, 9, 0, 0.496639,-99) , 
NN(
0, 
0, 
-1.98703, 0, -1, -1, 0.230775,-99) , 
-3.84692, 0, 10, 0, 0.495004,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.494435,-99)    );
  // itree = 90
  fBoostWeights.push_back(0.0679699);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.512374,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.270848,-99) , 
-4.05876, 0, 9, 0, 0.510808,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0796653,-99) , 
2.19989, 1, 9, 0, 0.509821,-99) , 
NN(
NN(
0, 
0, 
0.879253, 0, -1, -1, 0.442315,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.528975,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0496523,-99) , 
-4.7259, 1, 10, 0, 0.130263,-99) , 
-1.98703, 0, 9, 0, 0.235862,-99) , 
-3.84692, 0, 10, 0, 0.508168,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.507602,-99)    );
  // itree = 91
  fBoostWeights.push_back(0.0803606);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.663113,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.270894,-99) , 
-1.29287, 0, 2, 0, 0.586324,-99) , 
NN(
0, 
0, 
-3.85414, 0, -1, -1, 0.48839,-99) , 
1.91377, 0, 8, 0, 0.492491,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.98296, 1, 8, 0, 0.491934,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.691975,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-28.9714, 1, 7, 0, 0.499455,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.488654, 1, 5, 0, 0.373462,-99) , 
NN(
0, 
0, 
-26.585, 0, -1, -1, 0.0646882,-99) , 
-20.074, 0, 8, 0, 0.158396,-99) , 
-25.7112, 0, 7, 0, 0.491108,-99)    );
  // itree = 92
  fBoostWeights.push_back(0.082558);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.514664,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.37465, 1, 11, 0, 0.513923,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.840016,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.142281,-99) , 
2.63564, 0, 7, 0, 0.220768,-99) , 
-3.85414, 0, 11, 0, 0.512633,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.922101,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
10.8752, 1, 0, 0, 0.763788,-99) , 
NN(
0, 
0, 
-0.442138, 0, -1, -1, 0.237299,-99) , 
7.32551, 0, 0, 0, 0.323472,-99) , 
2.72243, 1, 8, 0, 0.510679,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.61225,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
1.38487, 1, 11, 0, 0.369561,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0645087,-99) , 
0.996961, 0, 11, 0, 0.157585,-99) , 
-25.7112, 0, 7, 0, 0.509833,-99)    );
  // itree = 93
  fBoostWeights.push_back(0.0414089);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
2.19989, 1, -1, -1, 0.491857,-99) , 
NN(
NN(
0, 
0, 
0.879253, 0, -1, -1, 0.452264,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.512659,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0529674,-99) , 
-4.7259, 1, 10, 0, 0.132093,-99) , 
-1.98703, 0, 9, 0, 0.241592,-99) , 
-3.84692, 0, 10, 0, 0.490376,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.489848,-99)    );
  // itree = 94
  fBoostWeights.push_back(0.0300645);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503797,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-6.02959, 0, 4, 0, 0.503105,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0914135,-99) , 
2.19989, 1, 9, 0, 0.502209,-99) , 
NN(
NN(
0, 
0, 
0.879253, 0, -1, -1, 0.458423,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502309,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0550834,-99) , 
-4.7259, 1, 10, 0, 0.133228,-99) , 
-1.98703, 0, 9, 0, 0.245165,-99) , 
-3.84692, 0, 10, 0, 0.500705,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500177,-99)    );
  // itree = 95
  fBoostWeights.push_back(0.0863716);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.524752,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.482729,-99) , 
-2.14362, 1, 7, 0, 0.494814,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-5.85276, 0, 4, 0, 0.494088,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.98296, 1, 8, 0, 0.493575,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.67617,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-28.9714, 1, 7, 0, 0.49184,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.488654, 1, 5, 0, 0.368714,-99) , 
NN(
0, 
0, 
-26.585, 0, -1, -1, 0.0648444,-99) , 
-20.074, 0, 8, 0, 0.158043,-99) , 
-25.7112, 0, 7, 0, 0.4928,-99)    );
  // itree = 96
  fBoostWeights.push_back(0.218986);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1.77388, 0, -1, 1, 0.831496,-99) , 
NN(
NN(
0, 
0, 
-1.3266, 0, -1, 1, 0.612842,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.631417,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.485743,-99) , 
-2.17256, 1, 7, 0, 0.497622,-99) , 
-1.2855, 1, 1, 0, 0.509197,-99) , 
-4.89873, 1, 8, 0, 0.513351,-99) , 
NN(
NN(
NN(
0, 
0, 
0.410924, 0, -1, 1, 0.522502,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.677618,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.24375,-99) , 
-1.12772, 1, 0, 0, 0.3384,-99) , 
2.58505, 1, 1, 0, 0.492719,-99) , 
NN(
NN(
0, 
0, 
-0.996044, 0, -1, 1, 0.656971,-99) , 
NN(
0, 
0, 
-15.1676, 1, -1, -1, 0.293194,-99) , 
-2.23612, 0, 8, 0, 0.356386,-99) , 
1.99817, 1, 0, 0, 0.46181,-99) , 
-2.94434, 0, 7, 0, 0.50201,-99)    );
  // itree = 97
  fBoostWeights.push_back(0.237891);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.932871,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-1.44267, 0, 2, 0, 0.894332,-99) , 
NN(
0, 
0, 
0, 1, -1, 1, 0.578029,-99) , 
1.42757, 0, 0, 0, 0.753627,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.557425,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-3.94518, 0, 6, 0, 0.555218,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.82543, 1, 8, 0, 0.553868,-99) , 
-3.01661, 1, 8, 0, 0.557121,-99) , 
NN(
NN(
NN(
0, 
0, 
1.38494, 0, -1, 1, 0.650079,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.52412,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.163468,-99) , 
2.82003, 1, 6, 0, 0.509945,-99) , 
-2.69562, 0, 7, 0, 0.565437,-99) , 
NN(
0, 
0, 
-1.37434, 0, -1, -1, 0.461612,-99) , 
0.390694, 0, 5, 0, 0.493969,-99) , 
-1.42655, 0, 7, 0, 0.532979,-99)    );
  // itree = 98
  fBoostWeights.push_back(0.148643);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.554996,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.499744,-99) , 
-0.137724, 1, 2, 0, 0.517467,-99) , 
NN(
0, 
0, 
-3.25515, 0, -1, -1, 0.0588317,-99) , 
-2.93123, 0, 4, 0, 0.515738,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.79758,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.445984,-99) , 
-1.32422, 0, 1, 0, 0.515748,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.637677,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.376433,-99) , 
-2.15989, 1, 7, 0, 0.415605,-99) , 
-1.28168, 1, 1, 0, 0.464757,-99) , 
-1.02859, 0, 2, 0, 0.508222,-99) , 
NN(
NN(
NN(
0, 
0, 
-1.85926, 0, -1, 1, 0.677384,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.86865, 0, 6, 0, 0.541488,-99) , 
NN(
0, 
0, 
-1.0472, 0, -1, -1, 0.273516,-99) , 
-3.46225, 1, 4, 0, 0.364487,-99) , 
-1.65067, 0, 1, 0, 0.505841,-99)    );
  // itree = 99
  fBoostWeights.push_back(0.243243);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-7.69351, 0, -1, 1, 0.71676,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-1.05592, 0, 11, 0, 0.676282,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.573464,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.302209,-99) , 
1.5631, 1, 7, 0, 0.564622,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.631942,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.438845,-99) , 
-9.42451, 1, 8, 0, 0.469985,-99) , 
-2.26968, 0, 7, 0, 0.539262,-99) , 
-11.3038, 1, 7, 0, 0.546368,-99) , 
NN(
NN(
NN(
0, 
0, 
-10.7466, 0, -1, 1, 0.874822,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.5683,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.483278,-99) , 
-2.16959, 1, 7, 0, 0.501108,-99) , 
-15.451, 1, 8, 0, 0.509249,-99) , 
NN(
NN(
0, 
0, 
-14.1074, 1, -1, 1, 0.521068,-99) , 
NN(
0, 
0, 
-37.0976, 1, -1, -1, 0.148382,-99) , 
0.382776, 1, 4, 0, 0.315475,-99) , 
-11.8069, 0, 7, 0, 0.502712,-99) , 
0.411142, 1, 0, 0, 0.521001,-99)    );
  // itree = 100
  fBoostWeights.push_back(0.143967);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.641783,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.249107,-99) , 
-0.875256, 0, 1, 0, 0.624301,-99) , 
NN(
0, 
0, 
-7.27659, 0, -1, -1, 0.15813,-99) , 
-11.6107, 0, 7, 0, 0.59594,-99) , 
NN(
NN(
0, 
0, 
-1.76104, 1, -1, 1, 0.524001,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.621287,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-3.64633, 1, 7, 0, 0.216336,-99) , 
-3.93513, 0, 6, 0, 0.522615,-99) , 
2.1375, 0, 4, 0, 0.527851,-99) , 
NN(
0, 
0, 
-3.19647, 1, -1, -1, 0.198027,-99) , 
-2.06372, 0, 0, 0, 0.526957,-99)    );
  // itree = 101
  fBoostWeights.push_back(0.218572);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.626537,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-3.30682, 0, 6, 0, 0.615034,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.695016,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.449869,-99) , 
-2.42107, 1, 4, 0, 0.482688,-99) , 
0.196164, 1, 7, 0, 0.549463,-99) , 
NN(
0, 
0, 
-2.23612, 0, -1, -1, 0.375828,-99) , 
-2.78636, 0, 7, 0, 0.516321,-99) , 
NN(
0, 
0, 
-0.701992, 0, -1, -1, 0.480853,-99) , 
1.64857, 0, 0, 0, 0.491837,-99)    );
  // itree = 102
  fBoostWeights.push_back(0.199786);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-2.40867, 0, -1, 1, 0.543866,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
6.442, 1, 1, 0, 0.543037,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.622737,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.398053,-99) , 
1.51964, 0, 0, 0, 0.576253,-99) , 
NN(
0, 
0, 
0.0339814, 0, -1, -1, 0.450058,-99) , 
1.27517, 0, 3, 0, 0.495407,-99) , 
-0.701992, 0, 1, 0, 0.533686,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.933602,-99) , 
NN(
0, 
0, 
-7.19726, 0, -1, -1, 0.48325,-99) , 
-17.2967, 1, 8, 0, 0.493987,-99) , 
NN(
NN(
0, 
0, 
-43.3863, 0, -1, 1, 0.734029,-99) , 
NN(
0, 
0, 
-24.2824, 1, -1, -1, 0.131226,-99) , 
-40.9312, 1, 8, 0, 0.213189,-99) , 
-11.8069, 0, 7, 0, 0.482948,-99) , 
2.886, 1, 0, 0, 0.525944,-99)    );
  // itree = 103
  fBoostWeights.push_back(0.153478);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1.75627, 1, -1, 1, 0.538022,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.561549,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.165233,-99) , 
2.26571, 0, 1, 0, 0.261165,-99) , 
-1.29686, 0, 0, 0, 0.530928,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.510494,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.41963,-99) , 
-1.61276, 0, 5, 0, 0.500425,-99) , 
NN(
0, 
0, 
0.983804, 1, -1, -1, 0.404086,-99) , 
-0.988841, 0, 4, 0, 0.482796,-99) , 
-0.479752, 0, 7, 0, 0.503711,-99) , 
NN(
0, 
0, 
-20.074, 0, -1, -1, 0.146762,-99) , 
-25.7112, 0, 7, 0, 0.502918,-99)    );
  // itree = 104
  fBoostWeights.push_back(0.165036);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.574753,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-5.17496, 0, 4, 0, 0.567192,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.507171,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.05618, 0, 6, 0, 0.135088,-99) , 
-1.77819, 0, 1, 0, 0.553678,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-14.8138, 0, 7, 0, 0.54305,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.66685,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.13053,-99) , 
1.97728, 0, 2, 0, 0.625751,-99) , 
NN(
0, 
0, 
-1.35442, 0, -1, -1, 0.472588,-99) , 
2.27702, 0, 1, 0, 0.477173,-99) , 
NN(
0, 
0, 
-0.319663, 0, -1, -1, 0.414518,-99) , 
2.58505, 1, 1, 0, 0.471785,-99) , 
4.12344, 0, 0, 0, 0.4771,-99)    );
  // itree = 105
  fBoostWeights.push_back(0.172925);
  fForest.push_back( 
NN(
NN(
0, 
0, 
1.11379, 0, -1, 1, 0.521215,-99) , 
NN(
NN(
NN(
0, 
0, 
0.0938532, 1, -1, 1, 0.5221,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.5507,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.281973,-99) , 
1.32079, 0, 4, 0, 0.410192,-99) , 
-0.318348, 0, 5, 0, 0.492796,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.779159,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.114471,-99) , 
1.33667, 1, 1, 0, 0.487687,-99) , 
NN(
0, 
0, 
-0.101459, 1, -1, -1, 0.0676936,-99) , 
0.960732, 0, 2, 0, 0.332112,-99) , 
1.14536, 0, 2, 0, 0.478389,-99) , 
1.16774, 1, 1, 0, 0.510605,-99)    );
  // itree = 106
  fBoostWeights.push_back(0.0868171);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1.66147, 1, -1, 1, 0.617,-99) , 
NN(
0, 
0, 
-4.05876, 0, -1, -1, 0.481603,-99) , 
1.27542, 0, 10, 0, 0.484129,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.712265,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.55906, 0, 11, 0, 0.464286,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.099229,-99) , 
2.19989, 1, 9, 0, 0.483296,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.482788,-99)    );
  // itree = 107
  fBoostWeights.push_back(0.0406765);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
2.19852, 0, -1, 1, 0.506484,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.786507,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.145796,-99) , 
-0.898917, 0, 10, 0, 0.290764,-99) , 
-4.05876, 0, 9, 0, 0.505019,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.69415,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.55906, 0, 11, 0, 0.45652,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.0988695,-99) , 
2.19989, 1, 9, 0, 0.504174,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.503666,-99)    );
  // itree = 108
  fBoostWeights.push_back(0.0726244);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.628696,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.496224,-99) , 
0.138332, 0, 10, 0, 0.533836,-99) , 
NN(
0, 
0, 
-1.6772, 0, -1, -1, 0.48752,-99) , 
0.429021, 0, 9, 0, 0.494956,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.685447,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.55906, 0, 11, 0, 0.45274,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.0986911,-99) , 
2.19989, 1, 9, 0, 0.494147,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.493659,-99)    );
  // itree = 109
  fBoostWeights.push_back(0.0649127);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
2.19852, 0, -1, 1, 0.512812,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.791822,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.16048,-99) , 
-0.898917, 0, 10, 0, 0.308766,-99) , 
-4.05876, 0, 9, 0, 0.511464,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.669581,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.55906, 0, 11, 0, 0.445763,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.0983555,-99) , 
2.19989, 1, 9, 0, 0.510646,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.51016,-99)    );
  // itree = 110
  fBoostWeights.push_back(0.0530167);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.558597,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.491941,-99) , 
2.19852, 0, 4, 0, 0.496116,-99) , 
NN(
0, 
0, 
3.98099, 0, -1, -1, 0.128738,-99) , 
3.21103, 1, 11, 0, 0.495401,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0980364,-99) , 
2.19989, 1, 9, 0, 0.494637,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.494181,-99)    );
  // itree = 111
  fBoostWeights.push_back(0.0432695);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.508303,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0476013,-99) , 
-4.76812, 0, 11, 0, 0.507712,-99) , 
NN(
0, 
0, 
3.57323, 1, -1, -1, 0.132842,-99) , 
3.21103, 1, 11, 0, 0.506997,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.642989,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.55906, 0, 11, 0, 0.433819,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.0977616,-99) , 
2.19989, 1, 9, 0, 0.506228,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.505773,-99)    );
  // itree = 112
  fBoostWeights.push_back(0.0217362);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
5.60841, 1, -1, -1, 0.497617,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.580217,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.155882,-99) , 
-1.97099, 0, 9, 0, 0.312424,-99) , 
-3.74404, 0, 10, 0, 0.496248,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.632996,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.55906, 0, 11, 0, 0.429247,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.0975275,-99) , 
2.19989, 1, 9, 0, 0.495514,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.495078,-99)    );
  // itree = 113
  fBoostWeights.push_back(0.0284792);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503578,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0538511,-99) , 
5.60841, 1, 2, 0, 0.502987,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0974082,-99) , 
2.19989, 1, 9, 0, 0.502243,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.652748,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.130316,-99) , 
-0.268608, 0, 11, 0, 0.464658,-99) , 
NN(
0, 
0, 
-3.95983, 0, -1, -1, 0.119186,-99) , 
0.393006, 1, 5, 0, 0.274501,-99) , 
-3.84692, 0, 10, 0, 0.500915,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500479,-99)    );
  // itree = 114
  fBoostWeights.push_back(0.028027);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
5.60841, 1, -1, -1, 0.495949,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.575187,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.15877,-99) , 
-1.97099, 0, 9, 0, 0.3125,-99) , 
-3.74404, 0, 10, 0, 0.49461,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.634561,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-4.55906, 0, 11, 0, 0.433894,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.0999392,-99) , 
2.19989, 1, 9, 0, 0.493898,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.493474,-99)    );
  // itree = 115
  fBoostWeights.push_back(0.0275873);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503457,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0568038,-99) , 
5.60841, 1, 2, 0, 0.502884,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.0997777,-99) , 
2.19989, 1, 9, 0, 0.502161,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.647285,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.132806,-99) , 
-0.268608, 0, 11, 0, 0.463077,-99) , 
NN(
0, 
0, 
-3.95983, 0, -1, -1, 0.1232,-99) , 
0.393006, 1, 5, 0, 0.276203,-99) , 
-3.84692, 0, 10, 0, 0.500863,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500439,-99)    );
  // itree = 116
  fBoostWeights.push_back(0.0409441);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.651042,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.493307,-99) , 
-1.89947, 1, 3, 0, 0.495261,-99) , 
NN(
0, 
0, 
2.59685, 0, -1, -1, 0.052075,-99) , 
-5.11395, 0, 11, 0, 0.494732,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
4.04834, 1, 7, 0, 0.494298,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.640109,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-28.9714, 1, 7, 0, 0.487556,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.488654, 1, 5, 0, 0.360664,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0849675,-99) , 
-20.074, 0, 8, 0, 0.17068,-99) , 
-25.7112, 0, 7, 0, 0.493651,-99)    );
  // itree = 117
  fBoostWeights.push_back(0.0333648);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.505941,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0925494,-99) , 
3.25139, 1, 11, 0, 0.505244,-99) , 
NN(
0, 
0, 
2.59685, 0, -1, -1, 0.0541336,-99) , 
-5.11395, 0, 11, 0, 0.504715,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
4.04834, 1, 7, 0, 0.504281,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.630624,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-28.9714, 1, 7, 0, 0.482033,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.488654, 1, 5, 0, 0.357634,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0848264,-99) , 
-20.074, 0, 8, 0, 0.170037,-99) , 
-25.7112, 0, 7, 0, 0.503624,-99)    );
  // itree = 118
  fBoostWeights.push_back(0.0190921);
  fForest.push_back( 
NN(
NN(
0, 
0, 
4.04834, 1, -1, -1, 0.496002,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.622818,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-28.9714, 1, 7, 0, 0.47746,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.488654, 1, 5, 0, 0.35511,-99) , 
NN(
0, 
0, 
2.11079, 0, -1, -1, 0.0847074,-99) , 
-20.074, 0, 8, 0, 0.169497,-99) , 
-25.7112, 0, 7, 0, 0.495369,-99)    );
  // itree = 119
  fBoostWeights.push_back(0.016439);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502105,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-5.74386, 0, 11, 0, 0.501653,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.36996, 0, 0, 0, 0.501194,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
4.04834, 1, 7, 0, 0.500775,-99) , 
NN(
NN(
0, 
0, 
-0.323252, 0, -1, -1, 0.353644,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.662972,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.0951266, 1, 11, 0, 0.460659,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.11079, 0, 5, 0, 0.0846385,-99) , 
-20.074, 0, 8, 0, 0.169183,-99) , 
-25.7112, 0, 7, 0, 0.500137,-99)    );
  // itree = 120
  fBoostWeights.push_back(0.0176516);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
2.19989, 1, -1, -1, 0.497724,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.643744,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.137398,-99) , 
-0.268608, 0, 11, 0, 0.463829,-99) , 
NN(
0, 
0, 
-3.95983, 0, -1, -1, 0.125735,-99) , 
0.393006, 1, 5, 0, 0.278373,-99) , 
-3.84692, 0, 10, 0, 0.496476,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.496063,-99)    );
  // itree = 121
  fBoostWeights.push_back(0.0268811);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503392,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0571137,-99) , 
5.60841, 1, 2, 0, 0.50283,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.105424,-99) , 
2.19989, 1, 9, 0, 0.502137,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.639686,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.139503,-99) , 
-0.268608, 0, 11, 0, 0.462405,-99) , 
NN(
0, 
0, 
-3.95983, 0, -1, -1, 0.127688,-99) , 
0.393006, 1, 5, 0, 0.279026,-99) , 
-3.84692, 0, 10, 0, 0.500874,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500461,-99)    );
  // itree = 122
  fBoostWeights.push_back(0.0246207);
  fForest.push_back( 
NN(
0, 
0, 
11.548, 1, -1, -1, 0.493845,-99)    );
  // itree = 123
  fBoostWeights.push_back(0.014676);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501842,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0623592,-99) , 
5.65163, 1, 2, 0, 0.501324,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.5799, 1, 11, 0, 0.500861,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.40983, 0, 0, 0, 0.500459,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0534781,-99) , 
11.548, 1, 0, 0, 0.5,-99)    );
  // itree = 124
  fBoostWeights.push_back(0.0147791);
  fForest.push_back( 
NN(
NN(
0, 
0, 
4.04834, 1, -1, -1, 0.496982,-99) , 
NN(
NN(
0, 
0, 
-0.323252, 0, -1, -1, 0.357844,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.662612,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-37.59, 1, 8, 0, 0.46094,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.11079, 0, 5, 0, 0.0848553,-99) , 
-20.074, 0, 8, 0, 0.171075,-99) , 
-25.7112, 0, 7, 0, 0.49636,-99)    );
  // itree = 125
  fBoostWeights.push_back(0.0158712);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501973,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-5.74386, 0, 11, 0, 0.501534,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.36996, 0, 0, 0, 0.501089,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
4.04834, 1, 7, 0, 0.500676,-99) , 
NN(
NN(
0, 
0, 
-0.323252, 0, -1, -1, 0.361247,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.865071,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.87178, 0, 4, 0, 0.460724,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-26.585, 0, 7, 0, 0.0848008,-99) , 
-20.074, 0, 8, 0, 0.172392,-99) , 
-25.7112, 0, 7, 0, 0.500053,-99)    );
  // itree = 126
  fBoostWeights.push_back(0.0173088);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
2.19989, 1, -1, -1, 0.49773,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.635665,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.143925,-99) , 
-0.268608, 0, 11, 0, 0.46257,-99) , 
NN(
0, 
0, 
-3.95983, 0, -1, -1, 0.131785,-99) , 
0.393006, 1, 5, 0, 0.28194,-99) , 
-3.84692, 0, 10, 0, 0.496521,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.49612,-99)    );
  // itree = 127
  fBoostWeights.push_back(0.0258551);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503262,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0617053,-99) , 
5.60841, 1, 2, 0, 0.502726,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.110831,-99) , 
2.19989, 1, 9, 0, 0.502058,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.631647,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.146071,-99) , 
-0.268608, 0, 11, 0, 0.461146,-99) , 
NN(
0, 
0, 
-3.95983, 0, -1, -1, 0.133778,-99) , 
0.393006, 1, 5, 0, 0.282601,-99) , 
-3.84692, 0, 10, 0, 0.500834,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500433,-99)    );
  // itree = 128
  fBoostWeights.push_back(0.104933);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-6.88235, 0, -1, 1, 0.778906,-99) , 
NN(
0, 
0, 
-4.61076, 0, -1, -1, 0.490959,-99) , 
-10.016, 1, 8, 0, 0.498242,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.707423,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.155442,-99) , 
-1.0861, 0, 11, 0, 0.659348,-99) , 
NN(
0, 
0, 
-13.6773, 1, -1, -1, 0.35576,-99) , 
-8.63908, 0, 8, 0, 0.441967,-99) , 
-8.36766, 0, 7, 0, 0.494515,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0540986,-99) , 
11.548, 1, 0, 0, 0.494067,-99)    );
  // itree = 129
  fBoostWeights.push_back(0.199949);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-6.05595, 0, -1, 1, 0.912794,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.834358,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.117716,-99) , 
-13.9985, 1, 8, 0, 0.666933,-99) , 
-6.92084, 0, 7, 0, 0.792978,-99) , 
NN(
NN(
0, 
0, 
-4.92997, 1, -1, 1, 0.522985,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.591266,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.361876,-99) , 
-4.20781, 0, 8, 0, 0.458738,-99) , 
-4.16318, 0, 7, 0, 0.517405,-99) , 
-11.7539, 1, 8, 0, 0.522149,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.885073,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.37538,-99) , 
0.811556, 1, 4, 0, 0.823823,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.600388,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.132627,-99) , 
1.12833, 1, 0, 0, 0.520638,-99) , 
-13.9834, 1, 7, 0, 0.657165,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.848037,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.309303,-99) , 
-15.9277, 0, 7, 0, 0.544921,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.540146,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.175485,-99) , 
0.599843, 0, 11, 0, 0.279908,-99) , 
-24.1201, 1, 8, 0, 0.375681,-99) , 
-9.04619, 0, 8, 0, 0.45621,-99) , 
-9.01551, 0, 7, 0, 0.51819,-99)    );
  // itree = 130
  fBoostWeights.push_back(0.237618);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
1.32897, 0, -1, 1, 0.660426,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.555373,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.386182,-99) , 
1.30323, 1, 0, 0, 0.505961,-99) , 
-2.03059, 0, 7, 0, 0.525545,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.680306,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0402688,-99) , 
-2.95798, 1, 7, 0, 0.591354,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.595206,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0256416,-99) , 
0.279881, 1, 0, 0, 0.126119,-99) , 
-0.121825, 0, 11, 0, 0.331624,-99) , 
-1.50404, 0, 6, 0, 0.512246,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.57533,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.375633,-99) , 
-0.475754, 0, 5, 0, 0.530731,-99) , 
NN(
0, 
0, 
1.91783, 1, -1, -1, 0.464565,-99) , 
1.72858, 0, 2, 0, 0.472958,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.702475,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.287998,-99) , 
0.230673, 1, 0, 0, 0.512078,-99) , 
NN(
0, 
0, 
0.516979, 0, -1, -1, 0.205273,-99) , 
-2.55502, 0, 8, 0, 0.27328,-99) , 
-2.48172, 0, 8, 0, 0.466955,-99) , 
-2.82073, 1, 8, 0, 0.476001,-99)    );
  // itree = 131
  fBoostWeights.push_back(0.127926);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-15.9689, 1, -1, 1, 0.520367,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.611986,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.390061,-99) , 
-9.04619, 0, 8, 0, 0.444631,-99) , 
-9.56465, 0, 7, 0, 0.516518,-99) , 
NN(
0, 
0, 
0.654787, 0, -1, -1, 0.247981,-99) , 
-1.8124, 0, 1, 0, 0.515392,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.517015,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.268825,-99) , 
-7.98327, 0, 8, 0, 0.493335,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.694135,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.236887,-99) , 
-2.29345, 1, 11, 0, 0.283249,-99) , 
-0.318348, 0, 5, 0, 0.45153,-99) , 
NN(
0, 
0, 
2.65856, 1, -1, -1, 0.0513735,-99) , 
2.29148, 0, 2, 0, 0.431899,-99) , 
2.57695, 1, 1, 0, 0.508701,-99)    );
  // itree = 132
  fBoostWeights.push_back(0.138715);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1.8124, 0, -1, -1, 0.485993,-99) , 
NN(
NN(
NN(
0, 
0, 
-1.58012, 0, -1, 1, 0.559521,-99) , 
NN(
0, 
0, 
0.153824, 0, -1, -1, 0.392992,-99) , 
-1.02281, 1, 0, 0, 0.435226,-99) , 
NN(
0, 
0, 
2.65856, 1, -1, -1, 0.0579779,-99) , 
2.29148, 0, 2, 0, 0.417556,-99) , 
2.57695, 1, 1, 0, 0.480556,-99)    );
  // itree = 133
  fBoostWeights.push_back(0.137715);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-2.36211, 0, -1, -1, 0.493541,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.539636,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.471055,-99) , 
1.8846, 0, 3, 0, 0.487342,-99) , 
NN(
0, 
0, 
-0.23622, 0, -1, -1, 0.416746,-99) , 
-0.99413, 0, 8, 0, 0.462707,-99) , 
0.510695, 1, 0, 0, 0.476455,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0508504,-99) , 
11.548, 1, 0, 0, 0.476014,-99)    );
  // itree = 134
  fBoostWeights.push_back(0.151184);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.698075,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-1.05592, 0, 11, 0, 0.666808,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.526563,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.327542,-99) , 
1.69846, 1, 7, 0, 0.522674,-99) , 
-11.3038, 1, 7, 0, 0.530079,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.524841,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0739229,-99) , 
2.99799, 1, 8, 0, 0.521494,-99) , 
NN(
0, 
0, 
-2.43505, 0, -1, -1, 0.468274,-99) , 
-0.62228, 0, 7, 0, 0.495902,-99) , 
0.228438, 1, 0, 0, 0.510167,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.907577,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.23305, 0, 11, 0, 0.87889,-99) , 
NN(
0, 
0, 
-7.43754, 0, -1, -1, 0.441082,-99) , 
-20.2043, 1, 8, 0, 0.453719,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-16.3172, 0, 7, 0, 0.447943,-99) , 
3.50472, 1, 0, 0, 0.503745,-99)    );
  // itree = 135
  fBoostWeights.push_back(0.155357);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
0.793728, 1, -1, 1, 0.808558,-99) , 
NN(
0, 
0, 
-48.7101, 1, -1, -1, 0.367226,-99) , 
-19.4408, 0, 7, 0, 0.626205,-99) , 
NN(
NN(
NN(
0, 
0, 
1.09518, 0, -1, 1, 0.501514,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.514649,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.225235,-99) , 
-0.20506, 0, 8, 0, 0.36346,-99) , 
-2.46736, 0, 4, 0, 0.497021,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.660374,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.177711,-99) , 
-1.26758, 0, 1, 0, 0.556507,-99) , 
NN(
0, 
0, 
1.59396, 1, -1, -1, 0.404729,-99) , 
1.97099, 0, 8, 0, 0.453752,-99) , 
1.14913, 1, 8, 0, 0.491617,-99) , 
-26.443, 1, 8, 0, 0.493251,-99)    );
  // itree = 136
  fBoostWeights.push_back(0.127629);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
0.132044, 1, -1, 1, 0.524514,-99) , 
NN(
0, 
0, 
-0.0592111, 0, -1, -1, 0.425316,-99) , 
5.91198, 1, 0, 0, 0.521722,-99) , 
NN(
0, 
0, 
0.654787, 0, -1, -1, 0.23715,-99) , 
-1.8124, 0, 1, 0, 0.520673,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.855233,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-6.71085, 0, 8, 0, 0.807904,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.517664,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.357754,-99) , 
-2.36485, 0, 7, 0, 0.456292,-99) , 
2.24174, 0, 5, 0, 0.469515,-99) , 
NN(
0, 
0, 
2.65856, 1, -1, -1, 0.0741198,-99) , 
2.29148, 0, 2, 0, 0.452726,-99) , 
2.57695, 1, 1, 0, 0.515355,-99)    );
  // itree = 137
  fBoostWeights.push_back(0.113317);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.50719,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.315715,-99) , 
4.46336, 1, 1, 0, 0.505004,-99) , 
NN(
0, 
0, 
-1.14611, 0, -1, -1, 0.1246,-99) , 
-3.44506, 0, 11, 0, 0.503787,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.564427,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
4.33757, 1, 0, 0, 0.454278,-99) , 
NN(
0, 
0, 
-0.659765, 0, -1, -1, 0.194326,-99) , 
-1.51936, 1, 1, 0, 0.288621,-99) , 
-2.46736, 0, 4, 0, 0.497967,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.577355,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.463081,-99) , 
2.54756, 0, 3, 0, 0.47584,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.90779, 1, 8, 0, 0.474268,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.519485,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.309194,-99) , 
-0.0115246, 0, 5, 0, 0.42468,-99) , 
NN(
0, 
0, 
0.815364, 1, -1, -1, 0.180332,-99) , 
0.947972, 1, 11, 0, 0.375832,-99) , 
1.66842, 1, 1, 0, 0.465216,-99) , 
0.132044, 1, 8, 0, 0.487289,-99)    );
  // itree = 138
  fBoostWeights.push_back(0.113605);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.660491,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.479785,-99) , 
1.44185, 0, 9, 0, 0.481476,-99) , 
NN(
0, 
0, 
0.45713, 1, -1, -1, 0.223525,-99) , 
1.80647, 1, 9, 0, 0.480505,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.48013,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.831025,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-6.71085, 0, 8, 0, 0.783939,-99) , 
NN(
0, 
0, 
-7.45514, 0, -1, -1, 0.430425,-99) , 
2.24174, 0, 5, 0, 0.442915,-99) , 
NN(
0, 
0, 
2.65856, 1, -1, -1, 0.0753329,-99) , 
2.29148, 0, 2, 0, 0.427259,-99) , 
2.57695, 1, 1, 0, 0.476027,-99)    );
  // itree = 139
  fBoostWeights.push_back(0.0720185);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.509959,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.138352,-99) , 
3.21103, 1, 11, 0, 0.509339,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503096,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0622536,-99) , 
0.45713, 1, 2, 0, 0.24386,-99) , 
1.80647, 1, 9, 0, 0.508368,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.507993,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.59598,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.179739,-99) , 
-8.04016, 0, 8, 0, 0.575047,-99) , 
NN(
0, 
0, 
0.153824, 0, -1, -1, 0.431944,-99) , 
-1.02281, 1, 0, 0, 0.469117,-99) , 
NN(
0, 
0, 
2.65856, 1, -1, -1, 0.0836382,-99) , 
2.29148, 0, 2, 0, 0.453322,-99) , 
2.57695, 1, 1, 0, 0.503782,-99)    );
  // itree = 140
  fBoostWeights.push_back(0.0480022);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-9835, 0, -1, -1, 0.488453,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.774258,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.447279,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0524495,-99) , 
6.33484, 1, 1, 0, 0.488037,-99)    );
  // itree = 141
  fBoostWeights.push_back(0.0215737);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502723,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.326374,-99) , 
-3.74404, 0, 10, 0, 0.501474,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.504417,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.115001,-99) , 
2.19989, 1, 9, 0, 0.50081,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500451,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0524101,-99) , 
6.33484, 1, 1, 0, 0.500034,-99)    );
  // itree = 142
  fBoostWeights.push_back(0.0211433);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-9835, 0, -1, -1, 0.495156,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.761866,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.443115,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0523917,-99) , 
6.33484, 1, 1, 0, 0.494748,-99)    );
  // itree = 143
  fBoostWeights.push_back(0.0162616);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502041,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.161213,-99) , 
3.21103, 1, 11, 0, 0.501442,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.50431,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.116883,-99) , 
2.19989, 1, 9, 0, 0.500793,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500441,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0523734,-99) , 
6.33484, 1, 1, 0, 0.500033,-99)    );
  // itree = 144
  fBoostWeights.push_back(0.0161119);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-4.0393, 0, -1, -1, 0.497391,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.500244,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.116663,-99) , 
2.19989, 1, 9, 0, 0.496752,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.496406,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0523591,-99) , 
6.33484, 1, 1, 0, 0.496004,-99)    );
  // itree = 145
  fBoostWeights.push_back(0.0183567);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.50231,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.279013,-99) , 
-4.0393, 0, 10, 0, 0.501419,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.116443,-99) , 
2.19989, 1, 9, 0, 0.500777,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500431,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.752021,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.439767,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0523446,-99) , 
6.33484, 1, 1, 0, 0.500029,-99)    );
  // itree = 146
  fBoostWeights.push_back(0.0181072);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
3.21103, 1, -1, -1, 0.496867,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.500806,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.118345,-99) , 
2.19989, 1, 9, 0, 0.496239,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.4959,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0523279,-99) , 
6.33484, 1, 1, 0, 0.495505,-99)    );
  // itree = 147
  fBoostWeights.push_back(0.0157579);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501978,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.165612,-99) , 
3.21103, 1, 11, 0, 0.501393,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.11809,-99) , 
2.19989, 1, 9, 0, 0.500763,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500423,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.745159,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.437411,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0523111,-99) , 
6.33484, 1, 1, 0, 0.500027,-99)    );
  // itree = 148
  fBoostWeights.push_back(0.0156156);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
3.21103, 1, -1, -1, 0.497468,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.500218,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.119741,-99) , 
2.19989, 1, 9, 0, 0.49685,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.496515,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0522962,-99) , 
6.33484, 1, 1, 0, 0.496126,-99)    );
  // itree = 149
  fBoostWeights.push_back(0.0154756);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501942,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.169993,-99) , 
3.21103, 1, 11, 0, 0.501371,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.119516,-99) , 
2.19989, 1, 9, 0, 0.50075,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500416,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.739155,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.435336,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0522813,-99) , 
6.33484, 1, 1, 0, 0.500027,-99)    );
  // itree = 150
  fBoostWeights.push_back(0.0153377);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-4.0393, 0, -1, -1, 0.497516,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.500183,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.121154,-99) , 
2.19989, 1, 9, 0, 0.496907,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.496578,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0522662,-99) , 
6.33484, 1, 1, 0, 0.496195,-99)    );
  // itree = 151
  fBoostWeights.push_back(0.0175218);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502204,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.286359,-99) , 
-4.0393, 0, 10, 0, 0.50135,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.120928,-99) , 
2.19989, 1, 9, 0, 0.500739,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.50041,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.733171,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.433253,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0522511,-99) , 
6.33484, 1, 1, 0, 0.500026,-99)    );
  // itree = 152
  fBoostWeights.push_back(0.0172893);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
3.21103, 1, -1, -1, 0.497004,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.500729,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.122803,-99) , 
2.19989, 1, 9, 0, 0.496407,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.496083,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0522336,-99) , 
6.33484, 1, 1, 0, 0.495706,-99)    );
  // itree = 153
  fBoostWeights.push_back(0.0150153);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501885,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.174359,-99) , 
3.21103, 1, 11, 0, 0.501327,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.122542,-99) , 
2.19989, 1, 9, 0, 0.500726,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500402,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.726306,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.430846,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0522159,-99) , 
6.33484, 1, 1, 0, 0.500025,-99)    );
  // itree = 154
  fBoostWeights.push_back(0.0148847);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
3.21103, 1, -1, -1, 0.497586,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.500161,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.124165,-99) , 
2.19989, 1, 9, 0, 0.496996,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.496678,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0522004,-99) , 
6.33484, 1, 1, 0, 0.496306,-99)    );
  // itree = 155
  fBoostWeights.push_back(0.014756);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501852,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.178705,-99) , 
3.21103, 1, 11, 0, 0.501307,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.123935,-99) , 
2.19989, 1, 9, 0, 0.500715,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500396,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.720322,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.428734,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0521848,-99) , 
6.33484, 1, 1, 0, 0.500024,-99)    );
  // itree = 156
  fBoostWeights.push_back(0.0146292);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-3.74404, 0, -1, -1, 0.49763,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.500129,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.125546,-99) , 
2.19989, 1, 9, 0, 0.49705,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.496736,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0521691,-99) , 
6.33484, 1, 1, 0, 0.496369,-99)    );
  // itree = 157
  fBoostWeights.push_back(0.0130269);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501633,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-6.11893, 0, 4, 0, 0.501288,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.125314,-99) , 
2.19989, 1, 9, 0, 0.500704,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.50039,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.714364,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.426616,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0521533,-99) , 
6.33484, 1, 1, 0, 0.500023,-99)    );
  // itree = 158
  fBoostWeights.push_back(0.0129425);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-9835, 0, -1, -1, 0.497152,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.711698,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.425664,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.052139,-99) , 
6.33484, 1, 1, 0, 0.49679,-99)    );
  // itree = 159
  fBoostWeights.push_back(0.0188077);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502373,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.344336,-99) , 
-3.74404, 0, 10, 0, 0.501271,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502964,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.128188,-99) , 
2.19989, 1, 9, 0, 0.500697,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500387,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0521247,-99) , 
6.33484, 1, 1, 0, 0.500025,-99)    );
  // itree = 160
  fBoostWeights.push_back(0.0184509);
  fForest.push_back( 
NN(
NN(
0, 
0, 
11.548, 1, -1, -1, 0.495767,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.70514,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.423309,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0521035,-99) , 
6.33484, 1, 1, 0, 0.495412,-99)    );
  // itree = 161
  fBoostWeights.push_back(0.0308155);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.504006,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.424912,-99) , 
-2.46677, 0, 6, 0, 0.501142,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.40983, 0, 0, 0, 0.500746,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0769605,-99) , 
11.548, 1, 0, 0, 0.50038,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.70129,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.421918,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0520824,-99) , 
6.33484, 1, 1, 0, 0.500024,-99)    );
  // itree = 162
  fBoostWeights.push_back(0.0284451);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-9835, 0, -1, -1, 0.493258,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.694794,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.419559,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0520462,-99) , 
6.33484, 1, 1, 0, 0.492912,-99)    );
  // itree = 163
  fBoostWeights.push_back(0.0166905);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.5021,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.303668,-99) , 
-4.19475, 0, 9, 0, 0.501236,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503136,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.129818,-99) , 
2.19989, 1, 9, 0, 0.500673,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500368,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0520119,-99) , 
6.33484, 1, 1, 0, 0.500022,-99)    );
  // itree = 164
  fBoostWeights.push_back(0.0164631);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-9835, 0, -1, -1, 0.496246,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.68514,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.416019,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0519914,-99) , 
6.33484, 1, 1, 0, 0.495906,-99)    );
  // itree = 165
  fBoostWeights.push_back(0.0139257);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501747,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.182944,-99) , 
3.21103, 1, 11, 0, 0.501215,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.503079,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.131406,-99) , 
2.19989, 1, 9, 0, 0.500661,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500362,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0519707,-99) , 
6.33484, 1, 1, 0, 0.500021,-99)    );
  // itree = 166
  fBoostWeights.push_back(0.0143864);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-5.95155, 0, -1, -1, 0.497141,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.689812,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.123015,-99) , 
-3.19647, 1, 8, 0, 0.235169,-99) , 
-2.06372, 0, 0, 0, 0.496568,-99)    );
  // itree = 167
  fBoostWeights.push_back(0.0164515);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502067,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0702695,-99) , 
4.71244, 1, 3, 0, 0.501568,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.43064, 1, 11, 0, 0.501091,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-5.95155, 0, 11, 0, 0.500738,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.686725,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.124575,-99) , 
-3.19647, 1, 8, 0, 0.236051,-99) , 
-2.06372, 0, 0, 0, 0.500161,-99)    );
  // itree = 168
  fBoostWeights.push_back(0.0157442);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-6.11893, 0, -1, -1, 0.497261,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.50132,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.131244,-99) , 
2.19989, 1, 9, 0, 0.496717,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.496422,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0518674,-99) , 
6.33484, 1, 1, 0, 0.496086,-99)    );
  // itree = 169
  fBoostWeights.push_back(0.0121671);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501525,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-6.11893, 0, 4, 0, 0.501197,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.130973,-99) , 
2.19989, 1, 9, 0, 0.50065,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500355,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.67481,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.412126,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0518472,-99) , 
6.33484, 1, 1, 0, 0.500018,-99)    );
  // itree = 170
  fBoostWeights.push_back(0.0120926);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-6.11893, 0, -1, -1, 0.498159,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.500425,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.132364,-99) , 
2.19989, 1, 9, 0, 0.497621,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.49733,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0518313,-99) , 
6.33484, 1, 1, 0, 0.496997,-99)    );
  // itree = 171
  fBoostWeights.push_back(0.012019);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501506,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-6.11893, 0, 4, 0, 0.501183,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.132151,-99) , 
2.19989, 1, 9, 0, 0.500642,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.50035,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.669464,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.410126,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0518154,-99) , 
6.33484, 1, 1, 0, 0.500017,-99)    );
  // itree = 172
  fBoostWeights.push_back(0.011945);
  fForest.push_back( 
NN(
NN(
0, 
0, 
11.548, 1, -1, -1, 0.497362,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.666799,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.409124,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0517993,-99) , 
6.33484, 1, 1, 0, 0.497033,-99)    );
  // itree = 173
  fBoostWeights.push_back(0.0116949);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501466,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.5799, 1, 11, 0, 0.501075,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.40983, 0, 0, 0, 0.500696,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0830526,-99) , 
11.548, 1, 0, 0, 0.500348,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.664139,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.51058, 1, 5, 0, 0.408122,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0517832,-99) , 
6.33484, 1, 1, 0, 0.500019,-99)    );
  // itree = 174
  fBoostWeights.push_back(0.0116248);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-6.11893, 0, -1, -1, 0.498258,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.50064,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
5.13327, 0, 0, 0, 0.133584,-99) , 
2.19989, 1, 9, 0, 0.497726,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.497438,-99) , 
NN(
0, 
0, 
2.22009, 0, -1, -1, 0.0517673,-99) , 
6.33484, 1, 1, 0, 0.497113,-99)    );
  // itree = 175
  fBoostWeights.push_back(0.0118366);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501484,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-6.11893, 0, 4, 0, 0.501164,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.133376,-99) , 
2.19989, 1, 9, 0, 0.50063,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.500342,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.659338,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-0.0316587, 0, 11, 0, 0.406144,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0517513,-99) , 
6.33484, 1, 1, 0, 0.500016,-99)    );
  // itree = 176
  fBoostWeights.push_back(0.0191153);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.500875,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.412813,-99) , 
-2.63509, 0, 6, 0, 0.498442,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.43064, 1, 11, 0, 0.497978,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-5.95155, 0, 11, 0, 0.497634,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.685323,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.127457,-99) , 
-3.19647, 1, 8, 0, 0.238835,-99) , 
-2.06372, 0, 0, 0, 0.497077,-99)    );
  // itree = 177
  fBoostWeights.push_back(0.0492613);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.548058,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.490796,-99) , 
-2.85825, 1, 10, 0, 0.493723,-99) , 
NN(
0, 
0, 
5.13327, 0, -1, -1, 0.132943,-99) , 
2.19989, 1, 9, 0, 0.493198,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.492914,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.545094,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.46745, 1, 5, 0, 0.401189,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.59053, 1, 3, 0, 0.0508288,-99) , 
6.33484, 1, 1, 0, 0.492592,-99)    );
  // itree = 178
  fBoostWeights.push_back(0.0323886);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.505914,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.138726,-99) , 
2.19989, 1, 9, 0, 0.505387,-99) , 
NN(
0, 
0, 
-0.856183, 0, -1, -1, 0.302927,-99) , 
-3.84692, 0, 10, 0, 0.504257,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.503973,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.648675,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-0.0316587, 0, 11, 0, 0.398566,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.22009, 0, 5, 0, 0.0507202,-99) , 
6.33484, 1, 1, 0, 0.503651,-99)    );
  // itree = 179
  fBoostWeights.push_back(0.0458952);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.504915,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.47479,-99) , 
0.876072, 1, 6, 0, 0.496779,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.5799, 1, 11, 0, 0.496397,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.40983, 0, 0, 0, 0.496025,-99) , 
NN(
0, 
0, 
-2.54515, 0, -1, -1, 0.0844774,-99) , 
11.548, 1, 0, 0, 0.495686,-99)    );
  // itree = 180
  fBoostWeights.push_back(0.045419);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-24.2531, 0, -1, 1, 0.789703,-99) , 
NN(
NN(
0, 
0, 
-2.36996, 0, -1, -1, 0.490808,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.659647,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
7.32551, 0, 0, 0, 0.113015,-99) , 
3.56629, 1, 8, 0, 0.490089,-99) , 
-40.3852, 1, 8, 0, 0.490853,-99) , 
NN(
0, 
0, 
0.996961, 0, -1, -1, 0.157123,-99) , 
-27.229, 0, 7, 0, 0.490445,-99)    );
  // itree = 181
  fBoostWeights.push_back(0.132336);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.557034,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.493895,-99) , 
-0.438745, 1, 4, 0, 0.519455,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.524208,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.451685,-99) , 
0.00821761, 0, 5, 0, 0.485612,-99) , 
-0.629301, 0, 8, 0, 0.50276,-99) , 
NN(
NN(
0, 
0, 
9.9113, 1, -1, 1, 0.654586,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
7.32551, 0, 0, 0, 0.127659,-99) , 
3.61375, 1, 8, 0, 0.502144,-99) , 
NN(
0, 
0, 
0.996961, 0, -1, -1, 0.156626,-99) , 
-27.229, 0, 7, 0, 0.50173,-99)    );
  // itree = 182
  fBoostWeights.push_back(0.159088);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
2.37002, 1, -1, 1, 0.529791,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.507595,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.356844,-99) , 
1.54691, 1, 8, 0, 0.49053,-99) , 
NN(
0, 
0, 
-2.01072, 1, -1, -1, 0.258911,-99) , 
-0.0201227, 1, 1, 0, 0.469891,-99) , 
-0.89168, 0, 4, 0, 0.514799,-99) , 
NN(
0, 
0, 
-2.31745, 0, -1, -1, 0.480459,-99) , 
-0.207574, 0, 0, 0, 0.506041,-99)    );
  // itree = 183
  fBoostWeights.push_back(0.164945);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
0.828167, 0, -1, 1, 0.531444,-99) , 
NN(
0, 
0, 
0.531909, 1, -1, -1, 0.289302,-99) , 
2.8666, 1, 6, 0, 0.528004,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.563653,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.343113,-99) , 
-6.19455, 0, 7, 0, 0.53756,-99) , 
NN(
0, 
0, 
0.936914, 1, -1, -1, 0.397222,-99) , 
1.18239, 0, 4, 0, 0.481,-99) , 
0.852263, 1, 0, 0, 0.513689,-99) , 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.965088,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.488197,-99) , 
-12.637, 0, 7, 0, 0.689927,-99) , 
NN(
0, 
0, 
-1.64345, 0, -1, -1, 0.474379,-99) , 
-20.4153, 1, 8, 0, 0.478018,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0164883,-99) , 
0.302543, 1, 1, 0, 0.47362,-99) , 
0.118685, 0, 2, 0, 0.493052,-99)    );
  // itree = 184
  fBoostWeights.push_back(0.129838);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-23.2627, 1, -1, 1, 0.524971,-99) , 
NN(
0, 
0, 
-8.39045, 1, -1, -1, 0.0885236,-99) , 
0.502939, 1, 2, 0, 0.523481,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.722198,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.21965, 0, 0, 0, 0.648938,-99) , 
NN(
0, 
0, 
-1.50371, 0, -1, -1, 0.392608,-99) , 
-3.46225, 1, 4, 0, 0.442824,-99) , 
-1.46587, 0, 1, 0, 0.517189,-99) , 
NN(
NN(
NN(
0, 
0, 
2.38568, 1, -1, 1, 0.721049,-99) , 
NN(
0, 
0, 
5.92191, 0, -1, -1, 0.485376,-99) , 
2.24174, 0, 5, 0, 0.48765,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.53842,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0197376,-99) , 
0.478027, 1, 1, 0, 0.459678,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.0115341,-99) , 
0.0429542, 0, 2, 0, 0.398513,-99) , 
0.269192, 0, 2, 0, 0.480735,-99) , 
0.22827, 1, 1, 0, 0.500141,-99)    );
  // itree = 185
  fBoostWeights.push_back(0.0823927);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-0.477067, 1, -1, 1, 0.510215,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.608105,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.462177,-99) , 
-2.22199, 1, 11, 0, 0.472489,-99) , 
-0.709619, 0, 4, 0, 0.498976,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.40983, 0, 0, 0, 0.498625,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.505368,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.54515, 0, 11, 0, 0.0882091,-99) , 
11.548, 1, 0, 0, 0.498281,-99)    );
  // itree = 186
  fBoostWeights.push_back(0.106195);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.514847,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.444036,-99) , 
-1.01785, 0, 11, 0, 0.500572,-99) , 
NN(
0, 
0, 
0.0545386, 0, -1, -1, 0.471124,-99) , 
-0.154116, 1, 10, 0, 0.490357,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.579583,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
1.31315, 1, 0, 0, 0.449131,-99) , 
NN(
0, 
0, 
-4.31407, 1, -1, -1, 0.0993554,-99) , 
0.316981, 1, 5, 0, 0.256341,-99) , 
-3.99952, 0, 10, 0, 0.489395,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.489115,-99)    );
  // itree = 187
  fBoostWeights.push_back(0.0663052);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.815972,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-24.2531, 0, 7, 0, 0.779611,-99) , 
NN(
NN(
0, 
0, 
4.09089, 1, -1, -1, 0.496905,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.540524,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.444048,-99) , 
-0.693077, 1, 0, 0, 0.458816,-99) , 
-2.14668, 0, 8, 0, 0.487671,-99) , 
-40.3852, 1, 8, 0, 0.488398,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.630032,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
1.38487, 1, 11, 0, 0.395406,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.996961, 0, 11, 0, 0.141983,-99) , 
-27.229, 0, 7, 0, 0.487997,-99)    );
  // itree = 188
  fBoostWeights.push_back(0.108107);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.540729,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.487361,-99) , 
0.220453, 1, 11, 0, 0.526114,-99) , 
NN(
0, 
0, 
-2.46736, 0, -1, -1, 0.481482,-99) , 
-0.629301, 0, 8, 0, 0.504193,-99) , 
NN(
NN(
0, 
0, 
9.9113, 1, -1, 1, 0.663423,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
7.32551, 0, 0, 0, 0.136622,-99) , 
3.61375, 1, 8, 0, 0.503667,-99) , 
NN(
0, 
0, 
0.996961, 0, -1, -1, 0.141176,-99) , 
-27.229, 0, 7, 0, 0.503258,-99)    );
  // itree = 189
  fBoostWeights.push_back(0.0532291);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-24.2531, 0, -1, 1, 0.788892,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.511054,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-5.75915, 0, 4, 0, 0.510677,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.653378,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
7.32551, 0, 0, 0, 0.118194,-99) , 
3.56629, 1, 8, 0, 0.510059,-99) , 
-40.3852, 1, 8, 0, 0.510762,-99) , 
NN(
0, 
0, 
0.996961, 0, -1, -1, 0.139762,-99) , 
-27.229, 0, 7, 0, 0.510361,-99)    );
  // itree = 190
  fBoostWeights.push_back(0.0179132);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-24.2531, 0, -1, 1, 0.7816,-99) , 
NN(
NN(
0, 
0, 
-2.36996, 0, -1, -1, 0.497391,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.641226,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
7.32551, 0, 0, 0, 0.11779,-99) , 
3.56629, 1, 8, 0, 0.496807,-99) , 
-40.3852, 1, 8, 0, 0.497512,-99) , 
NN(
0, 
0, 
0.996961, 0, -1, -1, 0.13902,-99) , 
-27.229, 0, 7, 0, 0.497133,-99)    );
  // itree = 191
  fBoostWeights.push_back(0.0178582);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-24.2531, 0, -1, 1, 0.77909,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502245,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.36996, 0, 0, 0, 0.501869,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.637095,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
7.32551, 0, 0, 0, 0.11765,-99) , 
3.56629, 1, 8, 0, 0.501283,-99) , 
-40.3852, 1, 8, 0, 0.501967,-99) , 
NN(
0, 
0, 
0.996961, 0, -1, -1, 0.138764,-99) , 
-27.229, 0, 7, 0, 0.501585,-99)    );
  // itree = 192
  fBoostWeights.push_back(0.0176578);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-24.2531, 0, -1, 1, 0.776558,-99) , 
NN(
NN(
0, 
0, 
-2.36996, 0, -1, -1, 0.497411,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.632956,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
7.32551, 0, 0, 0, 0.117508,-99) , 
3.56629, 1, 8, 0, 0.496836,-99) , 
-40.3852, 1, 8, 0, 0.497521,-99) , 
NN(
0, 
0, 
0.996961, 0, -1, -1, 0.138506,-99) , 
-27.229, 0, 7, 0, 0.497146,-99)    );
  // itree = 193
  fBoostWeights.push_back(0.017461);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-24.2531, 0, -1, 1, 0.774026,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.502195,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.36996, 0, 0, 0, 0.501826,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.628844,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
7.32551, 0, 0, 0, 0.117365,-99) , 
3.56629, 1, 8, 0, 0.501248,-99) , 
-40.3852, 1, 8, 0, 0.501912,-99) , 
NN(
0, 
0, 
0.996961, 0, -1, -1, 0.138249,-99) , 
-27.229, 0, 7, 0, 0.501535,-99)    );
  // itree = 194
  fBoostWeights.push_back(0.0172698);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-24.2531, 0, -1, 1, 0.771495,-99) , 
NN(
NN(
0, 
0, 
-2.36996, 0, -1, -1, 0.497467,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.62476,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
7.32551, 0, 0, 0, 0.117222,-99) , 
3.56629, 1, 8, 0, 0.4969,-99) , 
-40.3852, 1, 8, 0, 0.497565,-99) , 
NN(
0, 
0, 
0.996961, 0, -1, -1, 0.137993,-99) , 
-27.229, 0, 7, 0, 0.497195,-99)    );
  // itree = 195
  fBoostWeights.push_back(0.0160651);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.773085,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.01662, 1, 2, 0, 0.74148,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.58104, 0, 5, 0, 0.706412,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.501716,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-5.75915, 0, 4, 0, 0.501354,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.93928, 1, 8, 0, 0.50101,-99) , 
-35.2089, 1, 8, 0, 0.50186,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.562762,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-29.4592, 0, 8, 0, 0.36416,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
0.996961, 0, 11, 0, 0.137739,-99) , 
-27.229, 0, 7, 0, 0.501487,-99)    );
  // itree = 196
  fBoostWeights.push_back(0.110483);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1.22534, 1, -1, 1, 0.873891,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.638662,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.495462,-99) , 
0.374478, 0, 9, 0, 0.528027,-99) , 
-3.31551, 1, 9, 0, 0.537528,-99) , 
NN(
NN(
0, 
0, 
0.00059847, 0, -1, -1, 0.496608,-99) , 
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.508833,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.366509,-99) , 
-0.520959, 0, 10, 0, 0.434477,-99) , 
1.31648, 1, 8, 0, 0.490959,-99) , 
0.425971, 0, 10, 0, 0.497758,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-9835, 0, 9, 0, 0.497491,-99)    );
  // itree = 197
  fBoostWeights.push_back(0.0251903);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-29.2689, 1, -1, 1, 0.50496,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.36996, 0, 0, 0, 0.504594,-99) , 
NN(
NN(
0, 
0, 
9.9113, 1, -1, 1, 0.614508,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
7.32551, 0, 0, 0, 0.127792,-99) , 
3.61375, 1, 8, 0, 0.504115,-99) , 
NN(
0, 
0, 
-20.074, 0, -1, -1, 0.130264,-99) , 
-27.229, 0, 7, 0, 0.503735,-99)    );
  // itree = 198
  fBoostWeights.push_back(0.0575625);
  fForest.push_back( 
NN(
NN(
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.769621,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
2.01662, 1, 2, 0, 0.737981,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
-2.58104, 0, 5, 0, 0.703241,-99) , 
NN(
NN(
NN(
0, 
0, 
0, 1, -1, 1, 0.508244,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0.480952,-99) , 
-0.0747051, 1, 11, 0, 0.497329,-99) , 
NN(
0, 
0, 
0, 1, -1, -1, 0,-99) , 
3.93928, 1, 8, 0, 0.496992,-99) , 
-35.2089, 1, 8, 0, 0.49784,-99) , 
NN(
0, 
0, 
-20.074, 0, -1, -1, 0.133145,-99) , 
-27.229, 0, 7, 0, 0.497473,-99)    );
  // itree = 199
  fBoostWeights.push_back(0.0216747);
  fForest.push_back( 
NN(
0, 
0, 
11.548, 1, -1, -1, 0.494582,-99)    );
   return;
};
 
// Clean up
inline void ReadBDT::Clear() 
{
   for (unsigned int itree=0; itree<fForest.size(); itree++) { 
      delete fForest[itree]; 
   }
}
   inline double ReadBDT::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
         if (IsNormalised()) {
            // normalise variables
            std::vector<double> iV;
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(NormVariable( *varIt, fVmin[ivar], fVmax[ivar] ));
            }
            retval = GetMvaValue__( iV );
         }
         else {
            retval = GetMvaValue__( inputValues );
         }
      }

      return retval;
   }
