/*! \example ana.root_python.doc
 *
 *    - Example of AMS analysis with Python. To run it:
 *                 - setenv ROOTSYS /afs/cern.ch/exp/ams/Offline/root/Linux/pro
 *                 - setenv LD_LIBRARY_PATH $LD_LIBRARY_PATH:$ROOTSYS/lib
 *                 - ana.root.py
 *
 *    - You can find few other examples in $AMSDir/python
 *
 *    - Installation of the AMS Python library (only on LINUX for the moment):
 *       - Locally: "cd $AMSDir/python; gmake"
 *       - For all users in the machine: "cd $AMSDir/python; gmake; gmake install"
 *
 *    - If you want to see graphics, you have to start an application, 
 *      using "TApplication(...)" or even "TRint(...)", and then run it at the end
 *      with "app.Run()". Example:
 *            - app = TApplication("My Application",0,[])
 *            - ...
 *            - app.Run()
 *
 *    - Global variables like gROOT are accessed as "cvar.gROOT". Examples:
 *            - cvar.gROOT.Reset()
 *            - cvar.gStyle.SetOptLogy(1)
 *
 *    - You can use Python lists whenever ROOT expects a C-Float array as input. 
 *      Example:
 *            - a = [0.0, 1.0, 2.0]
 *            - b = [-1.0, 0.0, 1.0]
 *            - my_graph = TGraph(3, a, b)
 *
 *    - Whenever an Int_t, Float_t or Double_t argument is passed by reference, it 
 *      is assumed to be INPUT/OUTPUT. From the practical point of view:
 *            - gr = cvar.gRandom
 *            - xin, yin = 0.0, 0.0
 *            - xout, yout = gr.Rannor(xin,yin)
 *      
 *  \include ana.root.py
 */ 
